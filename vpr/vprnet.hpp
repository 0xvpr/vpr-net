#ifndef   VPRNET_HEADER
#define   VPRNET_HEADER

#include  <winsock2.h>
#include  <ws2tcpip.h>
#include  <windows.h>

#include  <memory>
#include  <regex>
#include  <mutex>

#include  <functional>
#include  <algorithm>
#include  <charconv>
#include  <ranges>
#include  <random>

#include  <unordered_map>
#include  <sstream>
#include  <string>
#include  <vector>
#include  <map>

#include  <optional>
#include  <variant>

// #include  <fstream> // TODO logging

#include  <cstring>
#include  <cfloat>
#include  <cerrno>

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////

namespace vprnet {
    class HttpClient;
    class HttpServer;
    class HttpRequest;
    class HttpResponse;

    namespace resources {
        class StatusLine;
        class Header;
        class Headers;
    } // namespace resources

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////

    typedef std::uint32_t button_t;
    enum types : button_t {
        button                          = 0,
        toggle                          = 1,
        i32_field                       = 2,
        i64_field                       = 3,
        u32_field                       = 4,
        u64_field                       = 5,
        f32_field                       = 6,
        f64_field                       = 7,
        str_field                       = 8
    };

    typedef std::uint16_t status_t;
    enum http_status : status_t {
        continue_                       = 100,
        switching_protocols             = 101,
        processing                      = 102,
        early_hints                     = 103,
        ok                              = 200,
        created                         = 201,
        accepted                        = 202,
        non_authoritative_information   = 203,
        no_content                      = 204,
        reset_content                   = 205,
        partial_content                 = 206,
        multi_status                    = 207,
        already_reported                = 208,
        im_used                         = 226,
        multiple_choices                = 300,
        moved_permanently               = 301,
        found                           = 302,
        see_other                       = 303,
        not_modified                    = 304,
        use_proxy                       = 305,
        // unused                       = 306, // 306 is unused, so it's omitted
        temporary_redirect              = 307,
        permanent_redirect              = 308,
        bad_request                     = 400,
        unauthorized                    = 401,
        payment_required                = 402,
        forbidden                       = 403,
        not_found                       = 404,
        method_not_allowed              = 405,
        not_acceptable                  = 406,
        proxy_authentication_required   = 407,
        request_timeout                 = 408,
        conflict                        = 409,
        gone                            = 410,
        length_required                 = 411,
        precondition_failed             = 412,
        payload_too_large               = 413,
        uri_too_long                    = 414,
        unsupported_media_type          = 415,
        range_not_satisfiable           = 416,
        expectation_failed              = 417,
        im_a_teapot                     = 418,
        misdirected_request             = 421,
        unprocessable_entity            = 422,
        locked                          = 423,
        failed_dependency               = 424,
        too_early                       = 425,
        upgrade_required                = 426,
        precondition_required           = 428,
        too_many_requests               = 429,
        request_header_fields_too_large = 431,
        unavailable_for_legal_reasons   = 451,
        internal_server_error           = 500,
        not_implemented                 = 501,
        bad_gateway                     = 502,
        service_unavailable             = 503,
        gateway_timeout                 = 504,
        http_version_not_supported      = 505,
        variant_also_negotiates         = 506,
        insufficient_storage            = 507,
        loop_detected                   = 508,
        not_extended                    = 510,
        network_authentication_required = 511
    };

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////

    namespace bin {
        const std::vector<uint8_t> viper_ico{ 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x40, 0x40, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0xD4, 0x14, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x08, 0x06, 0x00, 0x00, 0x00, 0xAA, 0x69, 0x71, 0xDE, 0x00, 0x00, 0x00, 0x01, 0x73, 0x52, 0x47, 0x42, 0x01, 0xD9, 0xC9, 0x2C, 0x7F, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x2E, 0x23, 0x00, 0x00, 0x2E, 0x23, 0x01, 0x78, 0xA5, 0x3F, 0x76, 0x00, 0x00, 0x14, 0x79, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9C, 0xC5, 0x5B, 0x79, 0x70, 0x94, 0x65, 0x9A, 0x8F, 0x07, 0x0B, 0xB9, 0x3A, 0x7D, 0xDF, 0x47, 0x4E, 0x12, 0x12, 0x12, 0xC8, 0x1D, 0x48, 0x90, 0xD3, 0x20, 0xC8, 0x2D, 0x82, 0x72, 0x44, 0x09, 0x87, 0x28, 0x97, 0x8A, 0x32, 0x10, 0xEE, 0x33, 0x20, 0xA0, 0x81, 0x24, 0xDC, 0x87, 0x20, 0x22, 0x06, 0x21, 0x08, 0x23, 0x49, 0xF7, 0xF7, 0x75, 0xAC, 0x19, 0xAB, 0x76, 0xFF, 0x98, 0x7F, 0xF6, 0xBF, 0xD5, 0xDA, 0xD9, 0xAA, 0x99, 0x9D, 0xD1, 0xAD, 0xAD, 0xAD, 0x9A, 0xAA, 0xD5, 0x19, 0x99, 0x5D, 0xC7, 0x7D, 0xF7, 0xF7, 0xFB, 0xBA, 0x9B, 0x34, 0x49, 0x1F, 0x5F, 0x93, 0x30, 0x74, 0xD5, 0x53, 0x7D, 0x7D, 0xFD, 0x7E, 0xCF, 0xF3, 0x7B, 0xEE, 0xE7, 0x7D, 0x3B, 0x29, 0xE9, 0x11, 0x3D, 0xFC, 0xB7, 0x3F, 0x7E, 0xC2, 0x57, 0x5E, 0x6E, 0x92, 0x4A, 0x4A, 0x6B, 0xE5, 0x82, 0xA2, 0x37, 0x64, 0x97, 0xA7, 0x4D, 0x76, 0x66, 0x76, 0xCB, 0x0E, 0xF7, 0xBF, 0xFA, 0x1D, 0xEE, 0x3F, 0xF9, 0xDD, 0x59, 0xFF, 0xD7, 0x63, 0x75, 0x8A, 0x1E, 0x8B, 0x43, 0xE0, 0xB5, 0x90, 0xF3, 0x0A, 0x84, 0xBF, 0xBC, 0x52, 0xC8, 0x13, 0x26, 0xFD, 0x49, 0xCE, 0xCE, 0x39, 0xDD, 0x53, 0x5C, 0xBA, 0x41, 0xAE, 0x1A, 0x33, 0xBE, 0x6B, 0x7C, 0xAD, 0xB9, 0xE7, 0xFA, 0xD9, 0x21, 0x8F, 0x8A, 0xCF, 0x41, 0x7F, 0x48, 0x0D, 0xAF, 0x68, 0xBC, 0x45, 0x85, 0x8B, 0xE4, 0xEC, 0xBC, 0xCF, 0x64, 0xBB, 0xEB, 0xF7, 0x7E, 0x9B, 0xF3, 0x6F, 0x14, 0x52, 0x11, 0xD4, 0x4A, 0x82, 0xD0, 0x21, 0xB2, 0x39, 0x02, 0x64, 0x75, 0x88, 0xFB, 0x60, 0x58, 0x03, 0xD7, 0x2A, 0xAF, 0xED, 0xAE, 0x9F, 0x01, 0xD8, 0xBF, 0xFB, 0xF3, 0x0B, 0xEF, 0x48, 0xD5, 0x35, 0x2B, 0xBB, 0xF6, 0xEF, 0x31, 0xCB, 0x9D, 0x57, 0x9F, 0x7E, 0xDC, 0x32, 0x46, 0x7C, 0xF4, 0xCC, 0x7D, 0xD1, 0xE0, 0x2B, 0x1E, 0xB5, 0x4B, 0x76, 0x7A, 0xFE, 0xF2, 0x80, 0x10, 0x78, 0xFD, 0x85, 0xDD, 0x21, 0x8E, 0x59, 0xAC, 0xE2, 0x4D, 0x93, 0x51, 0x4C, 0xD7, 0xEB, 0x44, 0x71, 0x46, 0x9A, 0xF0, 0xA4, 0xA7, 0x0A, 0x63, 0x5A, 0x9A, 0xD0, 0x83, 0x1C, 0xA0, 0x3C, 0x7C, 0xF6, 0x8C, 0x4E, 0x2B, 0x96, 0x19, 0x0D, 0x62, 0xAF, 0xD9, 0x2C, 0x3E, 0xB6, 0xD9, 0x85, 0x1F, 0xE0, 0xF8, 0x2D, 0xF6, 0xC0, 0x3A, 0x36, 0x97, 0x90, 0x5D, 0x99, 0x3F, 0x49, 0xF9, 0x85, 0x5B, 0xBD, 0x1B, 0xD7, 0xB9, 0x1F, 0xB7, 0xBC, 0xCA, 0xC3, 0xFB, 0xFE, 0x9E, 0x27, 0xBC, 0xE3, 0x9E, 0x71, 0xC9, 0x99, 0x39, 0xBB, 0xFD, 0x4E, 0xCF, 0xF7, 0x21, 0x2D, 0xDE, 0xB1, 0xDA, 0x45, 0x0B, 0x04, 0x5E, 0xA8, 0xD7, 0x8B, 0x7C, 0x4D, 0xBA, 0x48, 0x49, 0x49, 0x11, 0xC9, 0x29, 0xC9, 0xEA, 0x29, 0x35, 0x70, 0xBD, 0x39, 0x2D, 0x55, 0x4C, 0x06, 0x60, 0xDB, 0x4C, 0x66, 0x71, 0x0D, 0x6B, 0xD2, 0x52, 0xFC, 0x01, 0xCB, 0xF8, 0x6F, 0x5F, 0x45, 0x65, 0x9B, 0xB4, 0xBC, 0xB1, 0xE8, 0xEE, 0x95, 0xF3, 0x4F, 0x3E, 0x16, 0xE1, 0xEF, 0x2E, 0x6F, 0x4C, 0x95, 0xF2, 0xF2, 0x0F, 0xC0, 0x7F, 0xBF, 0x0B, 0x69, 0xFB, 0x0A, 0x98, 0x5C, 0x62, 0x34, 0x8A, 0xE1, 0x10, 0x3A, 0x2D, 0x35, 0xB2, 0xD0, 0x36, 0x4D, 0x9A, 0x98, 0xA4, 0xD7, 0x8A, 0x97, 0x0D, 0x7A, 0xB1, 0x0A, 0x16, 0x41, 0x8D, 0x3F, 0x8B, 0xF7, 0x79, 0x19, 0x00, 0x2A, 0xCA, 0x6F, 0x92, 0x01, 0xA0, 0x35, 0x3D, 0x4D, 0x4C, 0x00, 0x18, 0xFB, 0x2C, 0x16, 0xE1, 0xB3, 0x06, 0xDC, 0xC6, 0xEF, 0xCA, 0xFA, 0x56, 0x1A, 0x59, 0xD2, 0x22, 0x6F, 0xDA, 0x90, 0xF1, 0x77, 0x15, 0x5E, 0x1E, 0x59, 0x52, 0x0F, 0x73, 0xFC, 0x3A, 0x64, 0xE2, 0x17, 0xAD, 0x36, 0x31, 0x15, 0xDA, 0x4E, 0x8F, 0x22, 0x80, 0x86, 0x9A, 0xD4, 0xE9, 0xC4, 0x11, 0x58, 0x85, 0x6C, 0xEB, 0x75, 0x8F, 0x07, 0x08, 0xEB, 0x5C, 0xB6, 0xD9, 0xC4, 0x28, 0x5D, 0x86, 0xC8, 0xC0, 0xF5, 0xD9, 0x10, 0x38, 0x5F, 0xA3, 0x11, 0x99, 0x78, 0xEE, 0xBB, 0xAE, 0x1B, 0x60, 0xBD, 0x03, 0xF0, 0x6E, 0x05, 0xAD, 0x42, 0xF6, 0x64, 0xFD, 0xD6, 0x37, 0x76, 0xEC, 0x1C, 0xE9, 0xEE, 0xCD, 0x47, 0x6B, 0x0D, 0xDD, 0xB3, 0x66, 0x3C, 0x2D, 0x8F, 0x28, 0xD9, 0x04, 0x7F, 0xFC, 0x0B, 0x99, 0xBE, 0x0E, 0x06, 0x1A, 0xC0, 0x88, 0x09, 0xFE, 0x1C, 0x62, 0x2E, 0x85, 0x02, 0xA7, 0xA6, 0x8A, 0x11, 0x5A, 0x8D, 0xA2, 0xD1, 0x31, 0xF0, 0xEB, 0x76, 0x5C, 0x27, 0x5B, 0xA3, 0x08, 0x1E, 0x46, 0x5E, 0x5C, 0x33, 0x1D, 0x16, 0x74, 0xC2, 0x62, 0x13, 0xB7, 0xF1, 0x9B, 0x2E, 0x80, 0x75, 0x0B, 0x9F, 0x9D, 0x02, 0x70, 0xAB, 0xF1, 0x79, 0x51, 0x86, 0xA6, 0xF7, 0x3E, 0x58, 0x3B, 0x07, 0xEF, 0x97, 0x19, 0x0C, 0xE2, 0x0B, 0x5C, 0x87, 0x60, 0x79, 0x4F, 0x1E, 0x3F, 0xF1, 0x98, 0xDC, 0xFE, 0x81, 0xFE, 0x91, 0x08, 0xDF, 0x35, 0x6B, 0x66, 0xBA, 0x5C, 0x54, 0x7C, 0x0C, 0xC2, 0xFF, 0x99, 0xCC, 0x5E, 0x86, 0xD6, 0xCB, 0xB4, 0x19, 0xBD, 0xA6, 0x8E, 0x67, 0x07, 0xB4, 0xB5, 0x18, 0xA6, 0xCD, 0x80, 0x77, 0x14, 0xDF, 0x4F, 0x86, 0x69, 0x77, 0x30, 0x98, 0x59, 0x82, 0x51, 0x3E, 0x16, 0x08, 0xF8, 0x7E, 0x0B, 0x82, 0xDF, 0x5E, 0x98, 0x78, 0xA4, 0xEF, 0x69, 0x69, 0x1D, 0x00, 0xA6, 0x11, 0x40, 0xE8, 0xC2, 0x00, 0xE7, 0xFD, 0x9F, 0x81, 0x6B, 0x90, 0x1F, 0x64, 0x9D, 0x1F, 0xE5, 0xD2, 0xB2, 0x33, 0xD2, 0xEC, 0xB9, 0x9A, 0x41, 0x15, 0xDE, 0x5B, 0x3F, 0xCD, 0x28, 0xE5, 0xE4, 0x7D, 0x45, 0x41, 0x64, 0x30, 0xBA, 0xD9, 0x62, 0x16, 0x46, 0x08, 0x4B, 0x06, 0x52, 0xC1, 0xC0, 0x08, 0x00, 0xB1, 0x06, 0x8C, 0x9F, 0x84, 0xD6, 0xF6, 0x98, 0x2C, 0x62, 0xAD, 0xDE, 0x20, 0xC6, 0x9A, 0x4C, 0xF0, 0x59, 0xBD, 0xA8, 0x1B, 0x9A, 0x2C, 0xC6, 0x25, 0xA7, 0x88, 0x59, 0x46, 0x93, 0x78, 0x21, 0x35, 0x5D, 0xAC, 0xD1, 0x1A, 0xC4, 0x41, 0x08, 0x72, 0xCE, 0x64, 0x15, 0x9F, 0x07, 0x7D, 0x99, 0x02, 0x5E, 0x85, 0x00, 0x4B, 0x60, 0x4D, 0x7E, 0x15, 0x96, 0xD2, 0x82, 0x6B, 0x0D, 0x69, 0xA9, 0x0F, 0xC4, 0x08, 0x1D, 0xDE, 0x6F, 0x07, 0x80, 0x12, 0xAD, 0xCD, 0x95, 0xE9, 0xF7, 0x6E, 0xDB, 0x9C, 0x37, 0x78, 0xC2, 0x67, 0xE5, 0x7C, 0xC9, 0x1B, 0x4B, 0x60, 0x6E, 0x05, 0x34, 0x90, 0x1E, 0xBC, 0x39, 0xCD, 0xD0, 0x0A, 0xF4, 0x8B, 0x40, 0x9E, 0x0C, 0xAD, 0xD0, 0x65, 0x64, 0x88, 0x94, 0xB4, 0x14, 0xF8, 0x6C, 0x9A, 0x70, 0x22, 0x10, 0x66, 0xE1, 0xBA, 0x1C, 0x00, 0x95, 0xA9, 0xD3, 0x80, 0xC1, 0x34, 0x80, 0x95, 0xAA, 0x64, 0x84, 0x61, 0xC3, 0x86, 0x89, 0x74, 0x3C, 0xBB, 0xF1, 0x3C, 0x15, 0x60, 0xED, 0xB2, 0x3B, 0xC5, 0x12, 0xB3, 0x49, 0x5C, 0x02, 0x30, 0xF1, 0x84, 0x0F, 0xD1, 0xEB, 0x66, 0x63, 0xBF, 0x58, 0xC3, 0xD8, 0xB1, 0x14, 0x20, 0xD2, 0x75, 0xE4, 0xDC, 0xFC, 0xAF, 0xA4, 0x29, 0xCF, 0x9A, 0x06, 0x24, 0x7C, 0xF7, 0xDC, 0xB9, 0xE9, 0x52, 0x76, 0xEE, 0xAF, 0x79, 0xC3, 0x4E, 0x9B, 0x13, 0xD1, 0x5A, 0xA7, 0xF8, 0xB8, 0xA2, 0x79, 0xDC, 0x4C, 0x0F, 0x21, 0x19, 0xBD, 0xA7, 0xE1, 0xF3, 0x77, 0xA0, 0xE1, 0x36, 0x98, 0xFE, 0x2D, 0x7B, 0xB0, 0xB8, 0x09, 0x06, 0xB6, 0x4F, 0xA0, 0xAD, 0x97, 0x10, 0xE9, 0xB5, 0x0F, 0x68, 0xAC, 0x77, 0x0D, 0x02, 0x92, 0x06, 0x70, 0x4C, 0x08, 0x92, 0xD3, 0x32, 0x74, 0xE2, 0x0A, 0xEE, 0xA3, 0xC6, 0x0A, 0x4E, 0xC2, 0x0A, 0xD3, 0x52, 0xFB, 0xAF, 0x49, 0x57, 0x9C, 0x8B, 0xFB, 0x49, 0x58, 0x07, 0xC1, 0xFA, 0x9F, 0x7D, 0x6B, 0xD6, 0x3D, 0x5C, 0x4C, 0xF0, 0x2E, 0x5C, 0x38, 0x44, 0x2E, 0x2C, 0x6E, 0x09, 0x69, 0xFE, 0x39, 0x53, 0x2F, 0xE2, 0x06, 0x68, 0x79, 0x2A, 0x84, 0x3E, 0x63, 0xB5, 0x8A, 0x5F, 0x86, 0xAA, 0xBA, 0x08, 0x4C, 0xB6, 0xE1, 0xFB, 0xAC, 0xB0, 0xC0, 0x15, 0x8B, 0x08, 0x06, 0x81, 0x30, 0x0C, 0x1D, 0x26, 0xB6, 0xC3, 0x12, 0xFC, 0x31, 0x84, 0xBF, 0x0D, 0x7E, 0x26, 0xE2, 0xFE, 0xAC, 0x13, 0x0A, 0x60, 0x61, 0xB3, 0x10, 0x77, 0x1A, 0x8D, 0x7A, 0xB8, 0x90, 0x41, 0x71, 0x8D, 0x14, 0x00, 0xF3, 0x16, 0x2C, 0x8A, 0x55, 0xA7, 0x54, 0x58, 0xD2, 0xEA, 0xDD, 0xB6, 0x35, 0x39, 0x61, 0x00, 0x42, 0xD1, 0x9E, 0x8B, 0xAC, 0x86, 0xF0, 0x34, 0x77, 0x0D, 0x68, 0x36, 0xFC, 0xFA, 0x22, 0x18, 0x8C, 0x17, 0xD5, 0x8F, 0x98, 0x2D, 0xC8, 0xDD, 0x11, 0x34, 0x14, 0x0F, 0x08, 0xDC, 0x23, 0x75, 0xD8, 0x50, 0xB1, 0xC0, 0x00, 0x53, 0x76, 0x78, 0x1E, 0x0C, 0x84, 0xA0, 0x56, 0x80, 0x3A, 0x13, 0x82, 0x32, 0x60, 0x7E, 0x0C, 0x7F, 0xEF, 0x0E, 0xE3, 0x83, 0x3C, 0xAD, 0x80, 0x6B, 0xD0, 0x4A, 0x0D, 0xB8, 0xF7, 0x21, 0x5C, 0x8B, 0xA2, 0xE9, 0x9E, 0x5C, 0x5E, 0xB5, 0x3F, 0x31, 0xE1, 0x47, 0x8E, 0xAA, 0x87, 0x56, 0xFF, 0xCC, 0x32, 0x74, 0x1B, 0x4C, 0x2D, 0x03, 0x8B, 0x4D, 0x45, 0x44, 0xBF, 0x8A, 0x1B, 0xAA, 0x31, 0xCF, 0xBD, 0x10, 0x5E, 0x17, 0xB5, 0xA8, 0x51, 0x67, 0x0D, 0xC9, 0xC9, 0xC9, 0x62, 0x64, 0xBA, 0x46, 0x74, 0x38, 0xDC, 0xCA, 0x9A, 0xB7, 0xE0, 0x56, 0x1B, 0xC0, 0xCB, 0x0E, 0x08, 0xEE, 0x8B, 0x56, 0x4B, 0xF0, 0x3A, 0x28, 0x27, 0x33, 0x18, 0xA0, 0x4D, 0x58, 0xE7, 0x0A, 0xB3, 0x10, 0x40, 0xF0, 0x55, 0x54, 0x4D, 0x57, 0x25, 0x7C, 0x77, 0x63, 0x43, 0x8A, 0xEC, 0xCE, 0xFC, 0x26, 0x10, 0x99, 0xED, 0xC2, 0x06, 0x1F, 0x6F, 0x04, 0xAA, 0x3E, 0x15, 0x82, 0x2B, 0x9A, 0x07, 0xEA, 0xA1, 0x0C, 0x31, 0x10, 0x4A, 0x85, 0x9B, 0x0D, 0x1D, 0x3A, 0x54, 0x8C, 0x44, 0x60, 0x3D, 0xE7, 0x70, 0x8A, 0x46, 0x64, 0x95, 0x4F, 0x6C, 0xF6, 0xF8, 0x3C, 0x80, 0xCF, 0x72, 0xFC, 0x26, 0xB4, 0xCE, 0x58, 0xD4, 0x21, 0x9D, 0x0C, 0x8A, 0xAE, 0xCC, 0x6F, 0xA4, 0xF7, 0x0E, 0x98, 0x63, 0x0A, 0xEF, 0x3F, 0x73, 0xF8, 0x29, 0x29, 0x77, 0xF8, 0xFE, 0x40, 0xD0, 0x73, 0x88, 0x1A, 0xAD, 0x56, 0x2C, 0x84, 0x7F, 0xA9, 0xD1, 0x3A, 0xE9, 0x43, 0x54, 0x72, 0xFA, 0x08, 0xC1, 0xEE, 0x61, 0x89, 0x6E, 0xC7, 0x20, 0x99, 0x8D, 0x00, 0x79, 0xC3, 0x1E, 0x39, 0xCE, 0xF4, 0xA5, 0x2E, 0xF0, 0xCA, 0x0A, 0x32, 0x7C, 0x8D, 0x19, 0x90, 0x41, 0x82, 0x35, 0xCB, 0xC5, 0x65, 0xAD, 0xD2, 0x99, 0x18, 0xBD, 0x83, 0x6F, 0xC2, 0x78, 0x97, 0xDF, 0x93, 0xF5, 0x1F, 0xF4, 0xB5, 0x55, 0x40, 0xDC, 0x8E, 0x85, 0x58, 0xED, 0xA9, 0xB9, 0x31, 0x03, 0xE5, 0x4C, 0x54, 0x65, 0x83, 0x25, 0x7C, 0xB8, 0x00, 0x69, 0x78, 0xDE, 0x6A, 0xB6, 0x46, 0x0D, 0xB6, 0xBD, 0xC5, 0x92, 0x53, 0xEC, 0xB7, 0x5A, 0x94, 0x74, 0x18, 0xBE, 0x86, 0x11, 0xEF, 0xCF, 0x22, 0x1B, 0xA1, 0x61, 0xFB, 0x83, 0x34, 0x6D, 0x66, 0x76, 0x54, 0x00, 0x90, 0xEF, 0x77, 0x71, 0xA1, 0x2B, 0xB8, 0xD8, 0x06, 0xE1, 0xD7, 0x01, 0x84, 0x50, 0x3B, 0x1A, 0x8F, 0x18, 0x9C, 0x22, 0xA5, 0xBA, 0xC1, 0xA0, 0x34, 0xAC, 0xAB, 0x1B, 0x32, 0x44, 0x5C, 0xB3, 0xBB, 0x62, 0x98, 0x3E, 0x2A, 0x49, 0x14, 0x63, 0x26, 0xBA, 0x1F, 0x40, 0x1B, 0x76, 0x3F, 0x2D, 0x06, 0x9E, 0xD9, 0x55, 0xD2, 0x92, 0xA5, 0xD2, 0xF2, 0x0F, 0x22, 0x07, 0xBE, 0xF1, 0x53, 0xB4, 0xA8, 0xA7, 0xBF, 0xE7, 0x62, 0x73, 0x60, 0x32, 0xF5, 0x06, 0x1D, 0x52, 0x9C, 0x3A, 0xD3, 0xE7, 0xC2, 0xEC, 0xE5, 0x1F, 0x85, 0xF0, 0xA1, 0xCC, 0x30, 0x04, 0x00, 0x4C, 0x4C, 0x4F, 0xC7, 0xFD, 0x6C, 0x81, 0x06, 0x08, 0xF4, 0x39, 0xDC, 0xF4, 0x63, 0xBC, 0xDF, 0x8E, 0xA0, 0x5B, 0x07, 0x01, 0x0B, 0x91, 0x72, 0x5F, 0x40, 0x96, 0x62, 0x45, 0x78, 0x19, 0x9F, 0x77, 0x40, 0x91, 0xFB, 0xF1, 0xDD, 0x18, 0x54, 0xAA, 0xB4, 0xA4, 0xF6, 0x40, 0x56, 0xF8, 0xC1, 0xB7, 0x61, 0xAD, 0xAB, 0xBF, 0xF6, 0x47, 0x96, 0xEC, 0x20, 0x8A, 0x1D, 0x30, 0x79, 0x33, 0x50, 0x64, 0x03, 0xA2, 0x46, 0x78, 0xD2, 0x35, 0xDC, 0x2C, 0x2D, 0xED, 0xE1, 0xA3, 0x7E, 0x24, 0x1A, 0x96, 0x92, 0xA2, 0x34, 0x55, 0x76, 0x64, 0x20, 0x3B, 0x5A, 0xE8, 0x3C, 0x08, 0x58, 0x05, 0x9A, 0x0F, 0xE5, 0xCC, 0x81, 0x72, 0x2A, 0x20, 0x54, 0x16, 0xF8, 0xA4, 0xE0, 0x3B, 0x21, 0xF0, 0x05, 0xF0, 0xD0, 0x65, 0xB1, 0x47, 0xEC, 0x37, 0xD8, 0x35, 0x16, 0xE3, 0xFA, 0x29, 0x50, 0x12, 0x95, 0xE5, 0x1B, 0x5B, 0xFB, 0xFE, 0x83, 0xC1, 0x6F, 0xC9, 0x92, 0x74, 0xD9, 0xE9, 0xF9, 0x81, 0x17, 0x2F, 0x47, 0xA9, 0x5B, 0xA7, 0xD3, 0xAB, 0xEA, 0xDE, 0x42, 0xA6, 0xB7, 0x1E, 0xAE, 0x12, 0x32, 0xB5, 0x68, 0xE4, 0x02, 0xB3, 0x6F, 0xA0, 0x9E, 0xD8, 0x6B, 0x32, 0x8B, 0x03, 0x60, 0xF8, 0x08, 0xA8, 0x1D, 0x20, 0x9F, 0x04, 0xB5, 0x43, 0x4B, 0x6D, 0xA0, 0x56, 0x54, 0x93, 0x7C, 0x7F, 0x05, 0xA6, 0xCC, 0x0E, 0xAF, 0xC7, 0x1E, 0xBD, 0x81, 0x62, 0x2A, 0xDC, 0x04, 0x0D, 0x9B, 0x61, 0x15, 0xB5, 0x10, 0xEC, 0x56, 0x8C, 0xD4, 0x48, 0x6A, 0x32, 0x07, 0xDC, 0x83, 0x16, 0x23, 0x3B, 0x5D, 0xF7, 0xBA, 0xB6, 0xFD, 0xC2, 0x18, 0x30, 0xFD, 0x4F, 0x2F, 0x3F, 0xE1, 0x2D, 0x18, 0xB1, 0x80, 0x37, 0xFA, 0x02, 0x54, 0x08, 0xDF, 0xA7, 0x09, 0xA9, 0xD5, 0x3E, 0x11, 0x9D, 0xA8, 0x8D, 0x6F, 0xFE, 0x27, 0xAC, 0x2A, 0x2D, 0x0A, 0xEB, 0xDD, 0xB5, 0x06, 0xAC, 0xEA, 0x9A, 0xD9, 0x86, 0xBC, 0x1E, 0x6C, 0xA5, 0x43, 0x01, 0xB0, 0xCF, 0xB8, 0xED, 0x75, 0x82, 0x0F, 0x6B, 0x19, 0x09, 0x0D, 0xDF, 0x88, 0x11, 0xB0, 0xEF, 0x00, 0x20, 0x66, 0xA8, 0xA6, 0xA0, 0x6C, 0xDE, 0x71, 0xE3, 0x57, 0x29, 0x00, 0xF4, 0xDC, 0x3C, 0xFF, 0xB4, 0x3F, 0x3B, 0xAF, 0xA3, 0xC7, 0xE2, 0x54, 0x34, 0x42, 0xF3, 0xBF, 0x1B, 0x07, 0xCD, 0x70, 0x62, 0x9C, 0xC8, 0x8D, 0x93, 0xF7, 0x53, 0x60, 0x1D, 0x3B, 0xA0, 0xD5, 0x36, 0x46, 0x62, 0x5B, 0xF4, 0x48, 0x4E, 0x41, 0xD7, 0xA0, 0x84, 0xA5, 0xA9, 0x3F, 0xA7, 0xCB, 0x10, 0xD3, 0xA0, 0x59, 0xB6, 0xD4, 0x63, 0xF1, 0xBE, 0x1E, 0xAF, 0x17, 0xC0, 0xBF, 0x5F, 0x87, 0x85, 0x36, 0xA1, 0xD6, 0x6F, 0x36, 0x9A, 0xC5, 0x6E, 0xA3, 0x45, 0xE9, 0x4F, 0x42, 0xF7, 0x99, 0x81, 0xD7, 0xB1, 0x78, 0x65, 0xCF, 0x32, 0x03, 0xEB, 0x29, 0x59, 0x6B, 0x78, 0xC1, 0x0D, 0x05, 0x00, 0x6F, 0xDD, 0x38, 0x23, 0xFA, 0xE8, 0xDF, 0x11, 0xE1, 0x25, 0x48, 0x63, 0xD3, 0xE2, 0x2C, 0xD2, 0x97, 0xAE, 0x42, 0x4B, 0xE6, 0x38, 0xD1, 0x9F, 0x13, 0x9D, 0xE7, 0xC1, 0x7C, 0xAC, 0x42, 0x86, 0xDA, 0xE4, 0x88, 0x6C, 0x2D, 0xAA, 0xBD, 0x53, 0xA8, 0x27, 0x9A, 0xF0, 0x7A, 0x23, 0xFC, 0x7D, 0x13, 0x00, 0x39, 0x06, 0xEB, 0x39, 0x85, 0xDF, 0x1E, 0xB2, 0x9A, 0x45, 0x03, 0x3E, 0xAB, 0x40, 0xB0, 0x73, 0x69, 0x52, 0x95, 0x4A, 0xCF, 0x84, 0xFE, 0xC1, 0x89, 0x38, 0x51, 0x88, 0xC6, 0x6C, 0x13, 0xAC, 0x21, 0xD6, 0xCC, 0xE1, 0x20, 0xDC, 0xC0, 0x05, 0x0B, 0x97, 0x03, 0xE3, 0xB4, 0xEF, 0x7C, 0xAF, 0x2E, 0x75, 0x27, 0xF9, 0x2A, 0x2A, 0x6A, 0xA1, 0x95, 0x9F, 0x98, 0xFB, 0x8B, 0x50, 0xF5, 0x6D, 0x4D, 0xC0, 0xFC, 0x49, 0xE7, 0xB1, 0x68, 0xB4, 0x51, 0x18, 0xA9, 0x50, 0xAB, 0x11, 0x47, 0x39, 0x0A, 0x8B, 0x13, 0x53, 0xD8, 0x49, 0x72, 0x1E, 0xF0, 0x2E, 0x00, 0x30, 0x41, 0x98, 0x05, 0x0B, 0x5E, 0x14, 0x07, 0xF6, 0xED, 0x15, 0x13, 0x26, 0x8C, 0x57, 0x6A, 0x7B, 0x07, 0x84, 0xA5, 0xAF, 0xEF, 0x06, 0x08, 0x67, 0xEC, 0x56, 0xC5, 0xDC, 0x09, 0x3E, 0x7D, 0xFA, 0x06, 0xDC, 0xC4, 0xAB, 0x22, 0x66, 0x7D, 0x88, 0x7B, 0xB0, 0x44, 0xBF, 0x44, 0x45, 0xD8, 0x9C, 0x7F, 0x93, 0x46, 0x97, 0xD5, 0x26, 0xC9, 0x79, 0x05, 0xAB, 0xF8, 0x65, 0x37, 0x3E, 0xD4, 0x02, 0x9D, 0x8B, 0x09, 0xF4, 0xE4, 0xA4, 0xD3, 0x30, 0xED, 0x68, 0xC2, 0xB3, 0x63, 0xFC, 0x42, 0x45, 0x1D, 0xD1, 0x01, 0x97, 0x9B, 0x8D, 0x06, 0xE7, 0x84, 0xDD, 0x26, 0x46, 0x95, 0x14, 0x8B, 0x15, 0x2B, 0x96, 0x8B, 0xC3, 0x87, 0x0E, 0x89, 0x1E, 0x9F, 0x4F, 0x4C, 0x9C, 0x38, 0x01, 0xA5, 0x75, 0x3A, 0xFA, 0x7F, 0xD3, 0xFD, 0x1E, 0xC0, 0xAF, 0xA6, 0x24, 0x8E, 0x40, 0xCC, 0x14, 0x6C, 0xE8, 0x9A, 0x94, 0xA9, 0x93, 0x53, 0xF8, 0x4A, 0x46, 0xAF, 0x4B, 0x92, 0x3D, 0x39, 0x6D, 0xFC, 0x92, 0xFE, 0x9F, 0x0D, 0xE4, 0x6F, 0xAB, 0x2C, 0x7C, 0x42, 0x74, 0x06, 0xBF, 0x0B, 0x9F, 0xE6, 0x6A, 0xF1, 0xBA, 0x12, 0x01, 0x89, 0xE6, 0x16, 0x73, 0x04, 0x16, 0x8A, 0x21, 0x10, 0x6A, 0x35, 0xAC, 0xEE, 0x14, 0xE2, 0x43, 0x15, 0x2C, 0xE0, 0x50, 0x73, 0xB3, 0x38, 0x7F, 0xE6, 0xAC, 0x38, 0xDE, 0xD2, 0x22, 0x76, 0xEF, 0xD8, 0x2E, 0x66, 0xBB, 0x5C, 0xE2, 0xB3, 0x87, 0x14, 0xB8, 0x2F, 0x1D, 0xC2, 0x7D, 0xC8, 0xE3, 0x73, 0x88, 0x03, 0xCA, 0x74, 0xCB, 0x93, 0xD3, 0x4E, 0x00, 0x24, 0x7E, 0xB9, 0x09, 0x0D, 0x0F, 0x19, 0x57, 0x5B, 0xF7, 0x73, 0x01, 0xCE, 0xFE, 0xE6, 0x23, 0x20, 0x95, 0xC1, 0x34, 0xE7, 0x43, 0xDB, 0x1B, 0x91, 0xC6, 0x2E, 0xE0, 0x33, 0x35, 0xE6, 0x48, 0xBA, 0x0D, 0xC1, 0x0E, 0xD8, 0xED, 0xE2, 0x23, 0x3C, 0xCF, 0xC2, 0x3A, 0x2C, 0x58, 0x16, 0xD9, 0x2C, 0x62, 0x75, 0x76, 0x96, 0x78, 0x33, 0x2B, 0x4B, 0x1C, 0xC0, 0x5A, 0x5D, 0x6A, 0xD3, 0x31, 0xA8, 0x13, 0x69, 0xF3, 0x00, 0x4A, 0xE1, 0xB5, 0xE0, 0x83, 0x6E, 0xD7, 0x7D, 0x7F, 0x63, 0x25, 0x30, 0x60, 0x9D, 0x84, 0xF8, 0x41, 0x00, 0xEC, 0x88, 0x1F, 0xCA, 0xD0, 0xA6, 0xB4, 0xF2, 0xEB, 0x24, 0x54, 0x7F, 0xDF, 0x50, 0x68, 0x16, 0x17, 0x73, 0x74, 0xEA, 0x03, 0xE0, 0x3E, 0x68, 0xF8, 0x0D, 0x20, 0x7A, 0x47, 0x65, 0xAF, 0x10, 0x09, 0xC0, 0x9B, 0x76, 0x87, 0x12, 0x18, 0x97, 0xC3, 0x24, 0x19, 0xE4, 0x02, 0xE0, 0x47, 0x5E, 0x8F, 0xA0, 0x5E, 0xB7, 0xD0, 0xEF, 0xAD, 0x8A, 0xCF, 0x47, 0x53, 0x14, 0x05, 0xBE, 0x89, 0xB5, 0xEA, 0x11, 0x74, 0x1D, 0xB0, 0xE8, 0xB9, 0x50, 0xCE, 0x8B, 0xD0, 0x78, 0x56, 0x58, 0xA6, 0x62, 0x99, 0xFC, 0x39, 0xAE, 0x91, 0xCB, 0x2A, 0x45, 0x92, 0x6C, 0x73, 0xFE, 0x17, 0x33, 0x40, 0x75, 0x46, 0x9A, 0x32, 0x62, 0x56, 0xC3, 0x3C, 0x03, 0xDA, 0x0B, 0x40, 0x53, 0x4E, 0x40, 0xE0, 0x4E, 0x00, 0x75, 0x02, 0xCC, 0xB7, 0x99, 0x2C, 0xE2, 0x3C, 0xCC, 0xFD, 0x13, 0x68, 0xE8, 0x43, 0xA7, 0x5D, 0x9C, 0x86, 0xDF, 0xC7, 0xB2, 0x18, 0x56, 0x71, 0xAF, 0x21, 0xBA, 0x17, 0x23, 0xF2, 0xDB, 0x10, 0x08, 0x99, 0xA6, 0xCB, 0x21, 0xD0, 0xDB, 0x08, 0x86, 0x07, 0x01, 0xDC, 0xE7, 0x51, 0x7E, 0xCB, 0x42, 0x6A, 0xAC, 0x3E, 0x7A, 0x7D, 0x72, 0x81, 0x53, 0xE4, 0xBC, 0x02, 0x91, 0xE4, 0x77, 0x65, 0xFE, 0x4C, 0x00, 0x86, 0x6B, 0xD3, 0xC4, 0x3A, 0x98, 0x8E, 0x2A, 0xD3, 0x05, 0xCA, 0xAF, 0x1A, 0xF5, 0x2A, 0xCD, 0xDC, 0x21, 0x1A, 0x69, 0xDE, 0xCC, 0xED, 0xA0, 0x99, 0xD0, 0xC8, 0x0B, 0xB0, 0xB6, 0x65, 0xF8, 0xFD, 0x06, 0x04, 0xB6, 0xC3, 0xD6, 0xE0, 0x1C, 0x31, 0x82, 0x26, 0x0F, 0x41, 0xC0, 0x0A, 0x14, 0x59, 0x93, 0x11, 0x20, 0x57, 0xE1, 0xDA, 0x5D, 0xA0, 0x43, 0xC8, 0x12, 0x53, 0x00, 0xFE, 0x04, 0xAC, 0x71, 0x12, 0xD9, 0xE0, 0x24, 0x00, 0xEC, 0x70, 0x3A, 0x22, 0x8E, 0xD0, 0xD6, 0x98, 0xFA, 0x0F, 0x4E, 0x43, 0xC4, 0xEA, 0x13, 0xB2, 0x8B, 0x24, 0x0A, 0x4F, 0x73, 0xCA, 0x46, 0x3E, 0x7D, 0x07, 0x45, 0x86, 0x1A, 0xA1, 0x38, 0x9F, 0x7F, 0xC3, 0x18, 0xDF, 0x5A, 0x38, 0xAE, 0xA2, 0x6F, 0xEF, 0x84, 0x20, 0x6B, 0xC1, 0x4C, 0x8D, 0x4E, 0xAB, 0x68, 0x65, 0x86, 0x41, 0xAB, 0x08, 0xD4, 0x6A, 0x43, 0xBC, 0xE8, 0x53, 0x18, 0xD1, 0xBA, 0x18, 0x90, 0x4B, 0x71, 0xAD, 0x05, 0x59, 0x69, 0xB8, 0x9E, 0x3B, 0x45, 0xBD, 0x7B, 0x0F, 0x6E, 0x58, 0x42, 0x1B, 0xFC, 0x7C, 0x14, 0x53, 0xA2, 0x29, 0xBA, 0xC2, 0x08, 0x08, 0xE3, 0x53, 0x34, 0x00, 0x8E, 0x04, 0xD3, 0x7D, 0x52, 0x4F, 0x70, 0x36, 0x9F, 0x09, 0x7F, 0x79, 0x47, 0xA5, 0x0B, 0x7C, 0x02, 0x53, 0x5E, 0xA7, 0x02, 0x00, 0x8E, 0xB9, 0xDF, 0xB6, 0x98, 0xC4, 0xC4, 0x60, 0xF0, 0x31, 0x21, 0x9D, 0xD1, 0xEF, 0x23, 0x66, 0x07, 0x6B, 0xA0, 0x5C, 0x7D, 0x11, 0x4A, 0x88, 0x37, 0x54, 0x99, 0x09, 0x4B, 0xE2, 0x06, 0xCC, 0x2F, 0x0C, 0xD1, 0x15, 0x76, 0x0E, 0x26, 0x6E, 0x8D, 0x51, 0xA1, 0x1E, 0x36, 0x07, 0x52, 0x61, 0x92, 0xDF, 0x93, 0xA3, 0xDC, 0x3C, 0x17, 0x05, 0xCB, 0x7A, 0x95, 0x16, 0xF0, 0x11, 0x04, 0xA3, 0x79, 0xC5, 0xBB, 0xAE, 0x1D, 0x9A, 0x6F, 0x82, 0xC9, 0x4E, 0x0A, 0x8E, 0xCD, 0x3F, 0xB6, 0x46, 0x98, 0xF6, 0x72, 0xC7, 0x07, 0x7E, 0xBE, 0x11, 0xDA, 0x74, 0x6A, 0xD4, 0x8D, 0xD2, 0x9E, 0xC7, 0x7A, 0x2C, 0x91, 0x0F, 0xC0, 0x7D, 0x8E, 0x83, 0xEE, 0x86, 0x59, 0x51, 0x68, 0x70, 0xCA, 0x7D, 0x89, 0x58, 0x6B, 0xB4, 0xA2, 0x29, 0xEB, 0x71, 0x67, 0x23, 0x08, 0x0E, 0x1F, 0xA1, 0x34, 0x1A, 0x15, 0x00, 0x60, 0xB9, 0x4A, 0x0B, 0xB8, 0x61, 0xA5, 0x79, 0xC5, 0xEE, 0x18, 0x39, 0x9D, 0x79, 0x09, 0xEB, 0xAD, 0x46, 0x7A, 0x6D, 0x75, 0xD8, 0x23, 0x6E, 0x8D, 0x31, 0x83, 0x70, 0x80, 0x3A, 0x2A, 0x43, 0x13, 0x63, 0x67, 0xB8, 0x3F, 0x2D, 0x43, 0x4C, 0x70, 0xA2, 0x6A, 0x9D, 0x08, 0x25, 0xEC, 0x62, 0x51, 0x13, 0x6C, 0x94, 0x98, 0x32, 0xB7, 0xE2, 0x3D, 0x37, 0x4F, 0xE3, 0x75, 0xA7, 0x67, 0xE1, 0x66, 0xFE, 0xDC, 0x7C, 0x58, 0x40, 0xEE, 0xF0, 0x3F, 0xF0, 0xC7, 0x33, 0x81, 0xE8, 0x3C, 0x95, 0x7D, 0x00, 0x63, 0x46, 0x9D, 0x56, 0x27, 0x5E, 0x05, 0x03, 0x9D, 0xF6, 0xFE, 0x69, 0x8B, 0x51, 0x7D, 0x3D, 0x7C, 0x5C, 0x03, 0x26, 0xF2, 0xD1, 0xD4, 0xDC, 0xEE, 0x73, 0xCD, 0x55, 0xA4, 0xA0, 0xB5, 0xE6, 0xC0, 0x36, 0x7A, 0x6A, 0x82, 0xD3, 0x63, 0xD6, 0xFE, 0x1C, 0x8B, 0xE7, 0xA3, 0x66, 0xE0, 0x0C, 0x32, 0x04, 0x2A, 0x0F, 0x54, 0x70, 0x23, 0x56, 0xED, 0x7A, 0x1C, 0x96, 0x00, 0x80, 0xFF, 0x4C, 0x92, 0x73, 0xF3, 0x7E, 0x45, 0x04, 0xDF, 0x62, 0x90, 0xC2, 0xA2, 0x6A, 0xAA, 0x37, 0xD2, 0x07, 0x30, 0x33, 0x06, 0x25, 0xFA, 0xEB, 0x44, 0x80, 0xC7, 0x4D, 0xCB, 0x95, 0xD0, 0xF8, 0x2C, 0x80, 0xA8, 0x68, 0x20, 0xEC, 0x66, 0x99, 0xDA, 0xC0, 0xC9, 0x0F, 0xA6, 0xD9, 0x4A, 0x30, 0x19, 0xED, 0xEC, 0x40, 0xC4, 0x46, 0x0A, 0x01, 0xD0, 0xA5, 0xEB, 0x1D, 0x72, 0x4E, 0x30, 0x6A, 0x45, 0x25, 0x32, 0x40, 0x87, 0xBD, 0x57, 0x19, 0x9B, 0x11, 0xD0, 0x4C, 0x09, 0x4C, 0xA2, 0xF5, 0xB8, 0x56, 0x39, 0x7D, 0x92, 0x95, 0xF7, 0x2B, 0xF4, 0x02, 0xF9, 0xE7, 0xB8, 0x50, 0x0B, 0x7C, 0x22, 0x07, 0x51, 0x57, 0xED, 0x18, 0x8C, 0x75, 0x79, 0x6D, 0x65, 0x85, 0x68, 0x68, 0x58, 0x22, 0x6A, 0x6B, 0xC7, 0x8A, 0x4C, 0xA4, 0xA3, 0x78, 0x7E, 0x47, 0xF2, 0x78, 0x3C, 0x42, 0x9B, 0xC0, 0xF8, 0xAC, 0x06, 0x02, 0xF3, 0x7C, 0x01, 0x4D, 0x3A, 0x0F, 0x6E, 0x3A, 0x05, 0xDA, 0xFF, 0x28, 0x58, 0x1A, 0x77, 0xC3, 0xF7, 0x57, 0xC2, 0xD2, 0x12, 0x01, 0x94, 0x54, 0x07, 0x00, 0xA9, 0x74, 0xD9, 0x9D, 0xD5, 0x96, 0xE4, 0x2F, 0xA9, 0x58, 0xCF, 0xC5, 0x58, 0x93, 0x73, 0xDB, 0xF9, 0x52, 0x02, 0xA3, 0xB0, 0xF9, 0xC5, 0x23, 0x45, 0xE7, 0x8D, 0xCF, 0x84, 0xDF, 0xD7, 0x2D, 0x16, 0x4F, 0x9E, 0xA4, 0x6C, 0x70, 0x46, 0xBB, 0xE9, 0xE8, 0xD2, 0xD1, 0x62, 0xCB, 0x96, 0x2D, 0xE2, 0xE0, 0xC1, 0x83, 0xAA, 0xFD, 0xDD, 0x0D, 0x40, 0x6B, 0x8C, 0x81, 0x0C, 0x62, 0x41, 0xF9, 0x3A, 0xC1, 0x6C, 0x10, 0x7B, 0x82, 0xDB, 0xE7, 0xA1, 0xD2, 0x36, 0x91, 0xD8, 0x11, 0xA2, 0xF5, 0xC1, 0x5D, 0x68, 0x29, 0xAF, 0x60, 0x75, 0x92, 0x54, 0x55, 0x33, 0x4E, 0x69, 0x87, 0xF1, 0x41, 0x0E, 0x10, 0xDE, 0x93, 0x40, 0x3B, 0xBC, 0xD6, 0xE1, 0x10, 0x3B, 0x77, 0xEC, 0x50, 0x00, 0x58, 0x84, 0xAE, 0xED, 0x38, 0x7C, 0x32, 0xD2, 0x0D, 0x35, 0x08, 0x72, 0x7E, 0xBF, 0x5F, 0x7C, 0xF9, 0xE5, 0x97, 0x62, 0xF5, 0xEA, 0xD5, 0xAA, 0x98, 0xA4, 0x2F, 0xCF, 0x85, 0xC0, 0xBA, 0x60, 0x0D, 0xC0, 0x9D, 0xE5, 0x5A, 0x43, 0x20, 0xF0, 0xB2, 0xC6, 0x9F, 0x65, 0xD4, 0x2B, 0x83, 0x96, 0x44, 0x85, 0x27, 0x31, 0x3B, 0x21, 0x48, 0xFF, 0x24, 0x55, 0x56, 0xD5, 0x25, 0x79, 0xA7, 0xD5, 0x5B, 0x38, 0x2F, 0xA7, 0x40, 0xF3, 0x70, 0x83, 0x79, 0x2A, 0x33, 0x01, 0xE9, 0x2C, 0xD2, 0xE1, 0xBC, 0xA9, 0x53, 0x15, 0x00, 0x96, 0x3E, 0x3B, 0x05, 0xEE, 0x63, 0x57, 0xFA, 0xFF, 0xFE, 0x37, 0x1D, 0x26, 0x64, 0xAF, 0x57, 0x01, 0x60, 0xD1, 0xA2, 0x45, 0xF1, 0x99, 0x84, 0x60, 0x4B, 0x2D, 0xC6, 0x07, 0xD6, 0xCA, 0x41, 0x8A, 0x64, 0x0D, 0xD1, 0x85, 0x7B, 0xCC, 0x89, 0x51, 0xE0, 0xC4, 0x23, 0xEE, 0x11, 0x48, 0xEC, 0x3B, 0x9C, 0x99, 0xDF, 0x7A, 0x1B, 0x1B, 0x3C, 0x49, 0x3D, 0x77, 0x3E, 0xF9, 0x07, 0x79, 0x44, 0xD1, 0x1D, 0x0A, 0x74, 0x18, 0xC8, 0x70, 0x02, 0xEB, 0x8B, 0x31, 0xB6, 0x0A, 0x27, 0x09, 0xB4, 0xDA, 0xE3, 0x12, 0x1F, 0x5E, 0x38, 0x2F, 0x56, 0xCE, 0x9B, 0xAB, 0xCC, 0xEF, 0xDA, 0x6D, 0x81, 0x9E, 0xBB, 0x2F, 0x00, 0x17, 0x2F, 0x5E, 0x0C, 0x00, 0xB0, 0x38, 0x36, 0x00, 0x1C, 0x7E, 0x3C, 0x07, 0x1F, 0xAD, 0x0D, 0x16, 0x4F, 0x24, 0xEE, 0xF8, 0x1E, 0x87, 0x6B, 0xB2, 0x50, 0x1A, 0x6F, 0x18, 0xD8, 0xF8, 0x7D, 0xBA, 0x21, 0x90, 0xE9, 0xA4, 0x9C, 0xDC, 0x8E, 0xDE, 0x1D, 0xA1, 0x31, 0xB5, 0x2B, 0x38, 0xAB, 0x63, 0x63, 0xC1, 0x8D, 0xC5, 0x43, 0x09, 0xC4, 0x81, 0x8B, 0x3C, 0xBF, 0xD3, 0xD0, 0x20, 0x36, 0xAC, 0x5C, 0x29, 0xAE, 0x98, 0x03, 0xBF, 0x5B, 0x18, 0x41, 0x43, 0x6F, 0xBD, 0xF5, 0x96, 0x02, 0xC0, 0xAA, 0xD7, 0x56, 0xC5, 0x64, 0xB0, 0x1A, 0x19, 0x65, 0x01, 0x6B, 0xF8, 0x30, 0x10, 0x39, 0x2F, 0xB8, 0x0A, 0x60, 0xCB, 0x90, 0x52, 0x93, 0x07, 0xB0, 0xE9, 0xCA, 0x78, 0xB1, 0x3F, 0xE8, 0xE2, 0xD2, 0xE8, 0xB2, 0x86, 0xFB, 0x00, 0x74, 0x35, 0xEF, 0x36, 0xCA, 0x2E, 0xCF, 0xFF, 0x04, 0xDC, 0xC0, 0xA0, 0x0C, 0x23, 0xD5, 0xEE, 0x08, 0xF1, 0xBA, 0x79, 0x60, 0x6E, 0xE3, 0xC6, 0xB7, 0x45, 0x8B, 0x39, 0x10, 0xA0, 0xAE, 0xC3, 0xC4, 0xDC, 0x7D, 0x32, 0x42, 0x75, 0x4D, 0xB5, 0x90, 0x65, 0x59, 0x34, 0x35, 0x35, 0x45, 0x65, 0x90, 0xDD, 0x1E, 0x87, 0xA7, 0xBD, 0xB5, 0x7F, 0xB2, 0x32, 0x6B, 0xE8, 0x44, 0x21, 0x55, 0xC2, 0x73, 0x06, 0x03, 0x10, 0x9E, 0xE4, 0x81, 0x75, 0xD3, 0x4A, 0xD1, 0x04, 0xFD, 0xD5, 0xDB, 0x7E, 0x34, 0xB3, 0x77, 0x57, 0xE8, 0x97, 0x1D, 0x43, 0xA4, 0x82, 0xA2, 0xCD, 0x0C, 0x84, 0xF4, 0x6B, 0x0B, 0x98, 0xE7, 0xA1, 0x23, 0xB5, 0x56, 0x40, 0x81, 0xEB, 0x8A, 0x8A, 0xC4, 0x32, 0x5B, 0xAF, 0xE5, 0x1C, 0x06, 0xD2, 0xE1, 0xAE, 0x90, 0x8E, 0x35, 0x9B, 0x9B, 0x9B, 0xC5, 0x89, 0x13, 0x27, 0x22, 0x46, 0xEE, 0x4C, 0x30, 0xB7, 0x17, 0xBF, 0x77, 0x84, 0xE5, 0x73, 0x9E, 0x0A, 0xE3, 0xFC, 0xAE, 0x56, 0xA7, 0x1B, 0x90, 0xE0, 0x01, 0x4A, 0x51, 0xFA, 0x07, 0x45, 0xFB, 0xD5, 0x35, 0x07, 0xFB, 0xEF, 0x0C, 0xED, 0xD8, 0x9E, 0x8B, 0xC2, 0xE0, 0x7F, 0x09, 0xC2, 0x18, 0x1E, 0x64, 0x44, 0x94, 0x55, 0x3B, 0xD9, 0x21, 0x9D, 0x41, 0x70, 0x5A, 0x6A, 0x0E, 0xEB, 0xCE, 0xF0, 0x5B, 0xEE, 0x2D, 0x86, 0xE7, 0x68, 0xB7, 0xDB, 0x2D, 0xDA, 0xDA, 0xDA, 0x84, 0x1D, 0x1A, 0x0D, 0x67, 0xAE, 0x2C, 0x23, 0x43, 0x1C, 0x81, 0xF0, 0x25, 0xDA, 0xDE, 0x6D, 0xED, 0x2A, 0x68, 0xFE, 0x2C, 0x6A, 0x8B, 0x69, 0x74, 0xA7, 0x01, 0x6A, 0x9E, 0x94, 0x81, 0x35, 0xAE, 0x71, 0x06, 0xE0, 0xF4, 0xFC, 0xE0, 0x7B, 0x7D, 0x8D, 0x2D, 0xF2, 0xE6, 0x68, 0x45, 0x55, 0x0B, 0x19, 0x6F, 0x0D, 0x6E, 0x32, 0xEE, 0x4E, 0x70, 0x42, 0xDC, 0x97, 0x98, 0xB2, 0x5E, 0xE9, 0xE3, 0xCF, 0x2E, 0x97, 0x4B, 0x58, 0x2C, 0xE6, 0xFB, 0x3E, 0xC9, 0xD3, 0x9F, 0xAD, 0x10, 0x74, 0x74, 0x50, 0x78, 0x46, 0x69, 0x9E, 0x47, 0x68, 0x06, 0x20, 0x79, 0x2A, 0x0A, 0x2B, 0xB5, 0xB4, 0xD4, 0x14, 0x3C, 0x32, 0x33, 0xBA, 0xEC, 0xFD, 0x88, 0xC2, 0x2B, 0x7B, 0x04, 0xCB, 0x1A, 0x0A, 0x50, 0x1D, 0xFD, 0x91, 0x93, 0x1E, 0x6E, 0x32, 0xF0, 0x20, 0xE2, 0x17, 0x03, 0x1C, 0x48, 0x76, 0x5B, 0x59, 0xF7, 0x9B, 0xFA, 0x6D, 0x59, 0x13, 0x94, 0x97, 0x01, 0x0E, 0xF7, 0x00, 0x68, 0xFE, 0x3C, 0xF0, 0x34, 0x11, 0x5A, 0xA7, 0x25, 0xCC, 0x36, 0x44, 0x3F, 0x75, 0xFA, 0x70, 0xBE, 0x9F, 0x1E, 0x38, 0xAF, 0xE8, 0xCE, 0xFA, 0xCE, 0x3B, 0x7B, 0x56, 0x4E, 0x54, 0x00, 0xBA, 0x6E, 0x5C, 0x79, 0x52, 0xAA, 0x1E, 0x73, 0x8A, 0x8C, 0x9F, 0x07, 0x63, 0x04, 0xE0, 0x4D, 0xB3, 0xBA, 0x29, 0x51, 0x6C, 0x4B, 0x70, 0x8A, 0x7D, 0x56, 0x6E, 0x4A, 0x04, 0x34, 0x4A, 0x30, 0x5E, 0x86, 0x69, 0x5F, 0x46, 0x93, 0x54, 0x89, 0x3E, 0x61, 0x1C, 0x5C, 0x6E, 0x1B, 0xAC, 0xAE, 0x05, 0xF7, 0xAC, 0x44, 0xA4, 0x4F, 0xB4, 0x41, 0x8A, 0x45, 0x8C, 0x43, 0xAF, 0x29, 0xDA, 0x07, 0x1F, 0x85, 0x23, 0x8F, 0xF6, 0x5C, 0x3D, 0x17, 0xFB, 0xBF, 0x07, 0xD2, 0xAE, 0xED, 0x7A, 0x9E, 0xBD, 0x25, 0xE3, 0x3C, 0xE8, 0x64, 0x81, 0x76, 0xDA, 0x12, 0x48, 0x8B, 0xFD, 0x2D, 0xC0, 0x21, 0x8E, 0x62, 0x9D, 0xD1, 0x6C, 0x79, 0x11, 0x88, 0xAA, 0x20, 0xE0, 0x79, 0x4B, 0xE0, 0xB0, 0xC3, 0x11, 0x08, 0xCC, 0x19, 0x01, 0x0F, 0x3E, 0x4E, 0x07, 0x08, 0x83, 0xA9, 0xF5, 0x10, 0x2D, 0x44, 0x93, 0xC6, 0xC3, 0x1B, 0x7E, 0x4F, 0xF6, 0x6F, 0xBD, 0x07, 0xF6, 0xA8, 0x3B, 0x32, 0xE7, 0xAB, 0xAD, 0x9B, 0xE9, 0x77, 0xB8, 0x7F, 0x24, 0x93, 0x8B, 0x61, 0xA6, 0x79, 0xF0, 0xCF, 0xCE, 0x08, 0x73, 0xBB, 0x98, 0xE9, 0x11, 0x37, 0xE5, 0x4C, 0x8F, 0xC7, 0x6C, 0x18, 0x08, 0x3D, 0xE8, 0x10, 0x69, 0x4D, 0xDC, 0xF8, 0xDC, 0x06, 0x00, 0x18, 0x20, 0xB9, 0x0B, 0x55, 0x87, 0xB5, 0xFB, 0x17, 0x4E, 0x83, 0x43, 0x85, 0x58, 0x9B, 0x1B, 0xBE, 0x7E, 0xBB, 0xFB, 0xAF, 0x52, 0xFD, 0xD4, 0x97, 0x7A, 0x6E, 0x5C, 0x51, 0xF7, 0x67, 0x0B, 0x49, 0xFA, 0xEC, 0x49, 0xB9, 0x7A, 0xEC, 0x3E, 0x80, 0x70, 0x8F, 0x4D, 0x47, 0x3D, 0x7C, 0xB2, 0x1A, 0x15, 0xD4, 0xCD, 0x18, 0xF1, 0xC0, 0x07, 0x5F, 0xBF, 0x82, 0x14, 0xBA, 0x13, 0xDA, 0xE6, 0x2C, 0x8E, 0xE7, 0x03, 0xED, 0x08, 0xA4, 0xF5, 0xD0, 0xEC, 0xBE, 0x3E, 0x27, 0xBB, 0x42, 0x27, 0xCC, 0xD7, 0x1A, 0x8C, 0x62, 0x84, 0x72, 0x8E, 0x70, 0xF0, 0x01, 0xE0, 0xFD, 0x2F, 0xD3, 0xEF, 0x21, 0x83, 0x54, 0xFB, 0xCC, 0x7B, 0xAA, 0x04, 0x0F, 0x7F, 0x78, 0x4F, 0x1E, 0xD3, 0xF8, 0x8B, 0x4A, 0x8E, 0x91, 0x61, 0xCE, 0xD0, 0xD9, 0x8A, 0x56, 0x03, 0x88, 0xCE, 0xF0, 0x9D, 0x63, 0x65, 0x2B, 0xDB, 0x2E, 0x9A, 0xA1, 0xE9, 0x72, 0x04, 0xB0, 0xD0, 0xE9, 0x30, 0x46, 0x72, 0x4E, 0x6D, 0xAE, 0x73, 0xE8, 0x10, 0x27, 0x95, 0x72, 0x2A, 0xB4, 0x01, 0x56, 0x56, 0x84, 0xF8, 0xA0, 0xB8, 0xC0, 0x00, 0xAC, 0x81, 0x96, 0x44, 0x6B, 0xD3, 0x80, 0x8F, 0x23, 0x88, 0x39, 0x2C, 0xD2, 0x7C, 0x25, 0xA3, 0xDA, 0x7D, 0x07, 0xF6, 0xA4, 0x26, 0x0C, 0x80, 0x02, 0xC2, 0xCB, 0x2F, 0x69, 0xA4, 0xCC, 0xEC, 0x1E, 0x32, 0x7A, 0x16, 0x20, 0xE4, 0x20, 0x5F, 0x8F, 0x43, 0x51, 0x22, 0x07, 0x37, 0x30, 0x76, 0xC0, 0x94, 0x59, 0xA9, 0xD1, 0xAF, 0x47, 0xEA, 0x02, 0x69, 0x8C, 0x03, 0x8F, 0xD3, 0xDC, 0x0C, 0x4D, 0x30, 0x56, 0xD0, 0x35, 0x4E, 0xE0, 0x77, 0x1C, 0x9A, 0x94, 0x03, 0x6C, 0x4D, 0x5A, 0xA8, 0x20, 0x0A, 0x82, 0x12, 0xDE, 0xF9, 0x85, 0x5E, 0x07, 0xC1, 0x2A, 0x40, 0x9C, 0x5A, 0x0C, 0xAB, 0xAB, 0x47, 0xF7, 0xA8, 0x87, 0xAB, 0x6D, 0x64, 0xFA, 0x46, 0x69, 0x2F, 0x15, 0x14, 0xFE, 0xC6, 0xB7, 0x79, 0xA3, 0xE5, 0xA1, 0x84, 0xBF, 0x0F, 0x42, 0x63, 0x83, 0x1D, 0x55, 0xE2, 0x3F, 0x92, 0x49, 0xC6, 0x81, 0x56, 0x68, 0x95, 0x67, 0x06, 0x97, 0x41, 0x6B, 0x74, 0x8D, 0x76, 0x2B, 0x77, 0x75, 0xAC, 0xCA, 0x01, 0xEA, 0x19, 0x60, 0x42, 0x8E, 0x73, 0x92, 0x2B, 0x2E, 0x05, 0x8F, 0xDE, 0xF2, 0x8F, 0x15, 0xFC, 0x07, 0xCA, 0x61, 0x93, 0x45, 0x6C, 0x42, 0x20, 0xE3, 0xFF, 0x05, 0x96, 0xF1, 0x48, 0x2C, 0x68, 0x2D, 0x5E, 0x6F, 0x43, 0x0C, 0xE1, 0xA9, 0x92, 0x4E, 0x28, 0x86, 0x67, 0x85, 0xE6, 0xD1, 0xED, 0xE0, 0xF3, 0x47, 0x38, 0x2F, 0xE0, 0x39, 0xE1, 0xDC, 0xE1, 0x5F, 0xF9, 0x16, 0xCE, 0x8F, 0x5C, 0xF0, 0x24, 0xFA, 0xE8, 0x5E, 0xBC, 0xC4, 0x2A, 0x17, 0x14, 0xFD, 0x53, 0x88, 0x49, 0xEE, 0xBB, 0xB1, 0x41, 0xF1, 0x05, 0xFF, 0x05, 0xC6, 0xCD, 0x46, 0x9E, 0xD9, 0xB9, 0x93, 0x40, 0xE5, 0x38, 0x58, 0xC4, 0x7F, 0x99, 0x94, 0x42, 0xEB, 0x45, 0xB8, 0xFF, 0xE5, 0xE0, 0xD4, 0x59, 0x1A, 0x51, 0xF8, 0x1B, 0xEF, 0xFC, 0xB9, 0xD6, 0x41, 0x11, 0x3E, 0xF4, 0xF0, 0x2D, 0x5F, 0x91, 0xE1, 0x2B, 0x2D, 0x3F, 0xC9, 0x7F, 0x66, 0xEC, 0x86, 0xC6, 0xA5, 0xA0, 0xB0, 0x37, 0xE1, 0x0A, 0x99, 0x60, 0xE0, 0x42, 0x82, 0xDB, 0xEA, 0x03, 0xA5, 0x4F, 0x71, 0x3F, 0x4E, 0xA6, 0xCD, 0x30, 0xFF, 0x85, 0xFC, 0xD7, 0x08, 0x95, 0xC1, 0x80, 0x57, 0x52, 0xD2, 0x2E, 0x6D, 0x79, 0x77, 0x60, 0x66, 0x1F, 0xED, 0xE1, 0xDD, 0xFC, 0xEE, 0x30, 0x6F, 0x79, 0xC5, 0x8E, 0xAB, 0x4E, 0xD7, 0x8F, 0x21, 0x46, 0x2E, 0xA1, 0x05, 0xAE, 0x02, 0xFA, 0x8C, 0x0B, 0x89, 0xEC, 0xE4, 0x3E, 0x2C, 0xB1, 0x3F, 0x79, 0xDF, 0xCA, 0xD2, 0x59, 0xA3, 0x54, 0x78, 0x2C, 0x72, 0x14, 0x65, 0xB8, 0xB3, 0x7E, 0x46, 0x29, 0xBF, 0xE7, 0xA1, 0x03, 0x5E, 0x42, 0x40, 0x94, 0x95, 0xD7, 0xA3, 0xA5, 0xFC, 0x17, 0x32, 0x74, 0x86, 0xBB, 0xC4, 0x48, 0x67, 0xDC, 0xE5, 0x2D, 0xE7, 0x3F, 0x47, 0xE0, 0x1A, 0x3C, 0x5D, 0xAA, 0xB6, 0x9D, 0x56, 0x43, 0xCC, 0x24, 0x4C, 0xC7, 0x1C, 0xD7, 0xD5, 0x04, 0xB3, 0x4D, 0x03, 0x7C, 0x9E, 0x1B, 0x2A, 0x9C, 0x63, 0xC8, 0x99, 0x39, 0xFF, 0x26, 0x2F, 0x5E, 0xFC, 0xC6, 0x23, 0x17, 0x3C, 0xFC, 0x21, 0x1D, 0x6E, 0x36, 0xCB, 0xA3, 0x4A, 0x8F, 0x9F, 0x72, 0x38, 0xFF, 0xC8, 0x4A, 0x91, 0x15, 0x5F, 0x13, 0x0A, 0x1D, 0xFE, 0x8F, 0x88, 0x5B, 0x60, 0xB5, 0x78, 0xDE, 0x0A, 0xED, 0x7C, 0x64, 0x79, 0xF0, 0x48, 0xBB, 0x5A, 0xA2, 0x45, 0x7D, 0x0A, 0x01, 0x79, 0xD0, 0x62, 0x86, 0x3E, 0x60, 0xEA, 0xD9, 0x70, 0xB5, 0x57, 0x10, 0x04, 0xAF, 0x2B, 0x5B, 0xE9, 0x4A, 0x5F, 0xFF, 0xAD, 0x34, 0xA2, 0xE8, 0xB0, 0x74, 0xEC, 0xBD, 0xD8, 0x87, 0xA0, 0x1F, 0xD5, 0xA3, 0xFB, 0xF4, 0xE9, 0x27, 0x5F, 0x29, 0xAF, 0x28, 0xBD, 0x58, 0x5E, 0x7E, 0x49, 0x76, 0xBA, 0xBF, 0x57, 0x02, 0x10, 0x18, 0x3F, 0x07, 0xFF, 0x5C, 0x89, 0x2C, 0xC1, 0xFF, 0x12, 0xF1, 0x20, 0x53, 0x01, 0x4C, 0x95, 0x43, 0x16, 0x9E, 0xF0, 0xE2, 0x9F, 0xA2, 0x98, 0xEE, 0xB8, 0x6F, 0xD8, 0x11, 0x3C, 0xCD, 0xC9, 0xAD, 0x36, 0xA6, 0xCE, 0x83, 0xD0, 0xF0, 0x7A, 0xF8, 0xF3, 0x1C, 0x34, 0x62, 0x1C, 0x80, 0xD8, 0xD2, 0x53, 0x85, 0x03, 0xCF, 0x1C, 0xD2, 0xB0, 0x2C, 0xBF, 0x1D, 0x3C, 0x8B, 0x20, 0xBB, 0x32, 0x7F, 0x90, 0x2B, 0x6B, 0x5A, 0xBD, 0x33, 0x67, 0x66, 0xF9, 0xCF, 0x9E, 0x78, 0xEA, 0xB1, 0x08, 0x1F, 0x7A, 0x34, 0x36, 0x36, 0x3E, 0xB5, 0x6B, 0xD7, 0xAE, 0x74, 0x69, 0xCB, 0x3B, 0x1E, 0xDF, 0xE8, 0xB2, 0x9D, 0x60, 0xEE, 0x5E, 0x6F, 0x4A, 0x73, 0x28, 0xA7, 0xBC, 0x9B, 0xC1, 0xFC, 0x12, 0x98, 0xEC, 0x28, 0x9D, 0x06, 0x85, 0x0A, 0xF3, 0xFB, 0x30, 0x65, 0xA2, 0xAB, 0x9C, 0x06, 0x57, 0x28, 0x59, 0xF9, 0x8C, 0xA7, 0x43, 0xB3, 0xA0, 0xE5, 0xE7, 0xA1, 0xE5, 0x2D, 0xB0, 0xA6, 0x0B, 0x3C, 0xDA, 0x1A, 0x5E, 0x41, 0xBA, 0xB2, 0xEE, 0x49, 0x93, 0x26, 0xB7, 0xF9, 0x36, 0x6E, 0xB2, 0x3F, 0x56, 0xA1, 0x63, 0x3D, 0xBA, 0xF6, 0x34, 0x19, 0xBD, 0xE3, 0xC6, 0xAD, 0x40, 0x2A, 0xBA, 0xC9, 0xA3, 0x68, 0x1C, 0x3F, 0x2B, 0xCC, 0x07, 0x85, 0x90, 0x00, 0x08, 0x5B, 0x53, 0xCE, 0x12, 0x4F, 0x07, 0x89, 0x16, 0xC3, 0xA6, 0xE8, 0xAE, 0xB5, 0x77, 0xAB, 0x2B, 0xF8, 0x47, 0xEB, 0x9F, 0xFC, 0x4E, 0xCF, 0xB7, 0x52, 0x4E, 0xDE, 0x75, 0x5F, 0x71, 0xF1, 0xE2, 0xEE, 0x96, 0xE6, 0xC1, 0xC9, 0xEB, 0x7F, 0x8F, 0x87, 0xD4, 0xD5, 0xF9, 0x84, 0xB4, 0xBC, 0xD1, 0xED, 0xAB, 0xAE, 0x79, 0x06, 0x85, 0xD4, 0x6B, 0x08, 0x54, 0x6D, 0x3D, 0x65, 0x55, 0x5F, 0xCB, 0xE5, 0x95, 0xC2, 0x3F, 0x7C, 0x04, 0xBB, 0xB3, 0xFB, 0x45, 0x8F, 0xDF, 0x9D, 0x2D, 0xFC, 0xFC, 0xFB, 0x7C, 0x4E, 0xFE, 0x77, 0xFE, 0x9C, 0xE1, 0xBF, 0x96, 0xDD, 0xD9, 0x6D, 0x52, 0x5E, 0xC1, 0x6B, 0xBE, 0xAA, 0x9A, 0x3A, 0xEF, 0xCB, 0x0B, 0x1C, 0x8F, 0x92, 0xCF, 0xFF, 0x07, 0x02, 0x35, 0x05, 0x30, 0xFB, 0x7B, 0xBD, 0x9F, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 };
    } // bin

    using void_callback = std::function<void()>;
    using i32_callback  = std::function<void(std::int32_t)>;
    using i64_callback  = std::function<void(std::int64_t)>;
    using u32_callback  = std::function<void(std::uint32_t)>;
    using u64_callback  = std::function<void(std::uint64_t)>;
    using f32_callback  = std::function<void(std::float_t)>;
    using f64_callback  = std::function<void(std::double_t)>;
    using str_callback  = std::function<void(std::string)>;

    using variant_callback_t = std::variant<void_callback,
                                             i32_callback,
                                             i64_callback,
                                             u32_callback,
                                             u64_callback,
                                             f32_callback,
                                             f64_callback,
                                             str_callback>;

    typedef std::map<std::string,
                     std::pair<variant_callback_t, types>> endpoint_t;

    typedef std::shared_ptr<vprnet::HttpClient>   http_client_ptr;
    typedef std::unique_ptr<vprnet::HttpServer>   http_server_ptr;
    typedef std::shared_ptr<vprnet::HttpRequest>  http_request_ptr;
    typedef std::shared_ptr<vprnet::HttpResponse> http_response_ptr;

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////

    namespace element {

        const std::string default_css =
            "    <style>\r\n"
            "      html, body\r\n"
            "      {\r\n"
            "        font-family: \"Courier New\", Courier, monospace;\r\n"
            "        height:      95%;\r\n"
            "        background:  #050505;\r\n"
            "        margin:      0;\r\n"
            "        padding:     0;\r\n"
            "        overflow-x:  hidden;\r\n"
            "      }\r\n"
            "      button, input\r\n"
            "      {\r\n"
            "        text-decoration:  none;\r\n"
            "        display:          inline-block;\r\n"
            "        background-color: #808080;\r\n"
            "        color:            #E0E0E0;\r\n"
            "        cursor:           pointer;\r\n"
            "      }\r\n"
            "      \r\n"
            "      #player_cont\r\n"
            "      {\r\n"
            "        font-family: \"Courier New\", Courier, monospace;\r\n"
            "        text-decoration: none;\r\n"
            "      }\r\n"
            "      \r\n"
            "      #snip_content_cell\r\n"
            "      {\r\n"
            "        text-decoration: none;\r\n"
            "        text-align: center;\r\n"
            "        vertical-align: middle;\r\n"
            "        color: #ffffff;\r\n"
            "        width: 40%;\r\n"
            "        max-width: 100%;\r\n"
            "        height: 80%;\r\n"
            "        margin: auto;\r\n"
            "      }\r\n"
            "      \r\n"
            "      .sidebar\r\n"
            "      {\r\n"
            "        position: fixed;\r\n"
            "        top: 0;\r\n"
            "        left: 0;\r\n"
            "        height: 100%;\r\n"
            "        width: 200px;\r\n"
            "        max-width: 20%;\r\n"
            "        padding: 10px 14px;\r\n"
            "        background: #202020;\r\n"
            "      }\r\n"
            "      \r\n"
            "      .sidebar .control_panel\r\n"
            "      {\r\n"
            "         display: flex;\r\n"
            "         align-items: center;\r\n"
            "      }\r\n"
            "      .sidebar .text\r\n"
            "      {\r\n"
            "        font-size: 16px;\r\n"
            "        font-weight: 400;\r\n"
            "      }\r\n"
            "      \r\n"
            "      .sidebar .text .logo_text\r\n"
            "      {\r\n"
            "        font-size: 20px;\r\n"
            "        font-weight: 500;\r\n"
            "      }\r\n"
            "      \r\n"
            "      .sidebar .text .logo_description\r\n"
            "      {\r\n"
            "        font-size: 14px;\r\n"
            "        font-weight: 400;\r\n"
            "      }\r\n"
            "      \r\n"
            "      .sidebar .footer_buttons button\r\n"
            "      {\r\n"
            "        max-width: 100%;\r\n"
            "        width: 100%;\r\n"
            "        vertical-align: bottom;\r\n"
            "        font-size: 18px;\r\n"
            "      }\r\n"
            "      \r\n"
            "      nav, footer\r\n"
            "      {\r\n"
            "        width: 100%;\r\n"
            "      }\r\n"
            "      \r\n"
            "      .sidebar header toggle\r\n"
            "      {\r\n"
            "        position: absolute;\r\n"
            "        top: 6%;\r\n"
            "        right: -5%;\r\n"
            "        height: 25px;\r\n"
            "        width: 25px;\r\n"
            "        background: #404040;\r\n"
            "        color: #202020;\r\n"
            "        transform: translateY(-50%);\r\n"
            "        display: flex;\r\n"
            "        align-items: center;\r\n"
            "        justify-content: center;\r\n"
            "        border-radius: 50%;\r\n"
            "        border-color: #000000;\r\n"
            "        font-size: 22px\r\n"
            "        cursor: pointer;\r\n"
            "      }\r\n"
            "      .snip_link\r\n"
            "      {\r\n"
            "        /* text-decoration: none; */\r\n"
            "        color: #ffffff;\r\n"
            "        font-size:1.0em;\r\n"
            "      }\r\n"
            "      \r\n"
            "      .buy_link\r\n"
            "      {\r\n"
            "        color:#ffffff;\r\n"
            "        font-size:1.0em;\r\n"
            "      }\r\n"
            "      \r\n"
            "      #snip_index_cell\r\n"
            "      {\r\n"
            "        text-align: center;\r\n"
            "        vertical-align:top;\r\n"
            "        height:4em; color: #eeeeee;\r\n"
            "      }\r\n"
            "      #next_cell,#prev_cell\r\n"
            "      {\r\n"
            "        text-align: center;\r\n"
            "        vertical-align:top;\r\n"
            "      }\r\n"
            "      \r\n"
            "      #play_cont_cell, #return_cell,#rehero_cell\r\n"
            "      {\r\n"
            "        text-align: center;\r\n"
            "        vertical-align:top;\r\n"
            "        width: 33%;\r\n"
            "        white-space: nowrap;\r\n"
            "      }\r\n"
            "      \r\n"
            "      #xchg_rax\r\n"
            "      {\r\n"
            "        text-align: center;\r\n"
            "        vertical-align:top;\r\n"
            "        white-space: nowrap;\r\n"
            "        color:#eeeeee;\r\n"
            "      }\r\n"
            "      \r\n"
            "      #play_cont_cell\r\n"
            "      {\r\n"
            "        text-align: center;\r\n"
            "        white-space: nowrap;\r\n"
            "        color:#eeeeee;\r\n"
            "      }\r\n"
            "      \r\n"
            "      #lower_table\r\n"
            "      {\r\n"
            "        height: 97%;\r\n"
            "      }\r\n"
            "      \r\n"
            "      #lower_links_table\r\n"
            "      {\r\n"
            "        width: 97%;\r\n"
            "      }\r\n"
            "      \r\n"
            "      #upper_table\r\n"
            "      {\r\n"
            "        height: 5%;\r\n"
            "      }\r\n"
            "      \r\n"
            "      #lower_menu_cell\r\n"
            "      {\r\n"
            "        text-align: center;\r\n"
            "      }\r\n"
            "      \r\n"
            "      #contact_cell\r\n"
            "      {\r\n"
            "        color: #333333;\r\n"
            "        text-align: center;\r\n"
            "      }\r\n"
            "      \r\n"
            "      #buy_comment\r\n"
            "      {\r\n"
            "        color:#eeeeee;\r\n"
            "        text-align:center;\r\n"
            "        background-color:#222222;\r\n"
            "        padding:0.8em;\r\n"
            "      }\r\n"
            "      \r\n"
            "      a:hover\r\n"
            "      {\r\n"
            "        color: #10ff10;\r\n"
            "      }\r\n"
            "      \r\n"
            "      table\r\n"
            "      {\r\n"
            "        margin-left: auto;\r\n"
            "        margin-right: auto;\r\n"
            "      }\r\n"
            "      \r\n"
            "      pre\r\n"
            "      {\r\n"
            "        font-size: 1.1em;\r\n"
            "      }\r\n"
            "      \r\n"
            "      .menu_link\r\n"
            "      {\r\n"
            "        /* .link_next_prev,.return_link { */\r\n"
            "        color: #8f8f8f;\r\n"
            "        font-size:1.0em;\r\n"
            "        /* text-decoration:none; */\r\n"
            "      }\r\n"
            "      \r\n"
            "      .link_disabled\r\n"
            "       {\r\n"
            "        color: #262626;\r\n"
            "        font-size:1.0em;\r\n"
            "        /* visibility:hidden; */\r\n"
            "      }\r\n"
            "    </style>\r\n";

        const std::string js =
            "  <script src=\"https://unpkg.com/boxicons@2.1.4/dist/boxicons.js\"></script>\r\n"
            "  <script>\r\n"
            "    document.getElementById('toggle').addEventListener('click', function() {\r\n"
            "      var sidebar = document.getElementById('sidebar');\r\n"
            "\r\n"
            "      if (sidebar.style.display === 'block') {\r\n"
            "        sidebar.style.display = 'none';\r\n"
            "      } else {\r\n"
            "          sidebar.style.display = 'block';\r\n"
            "      }\r\n"
            "    });\r\n"
            "\r\n"
            "    function fetch_endpoint(endpoint) {\r\n"
            "      fetch(endpoint)\r\n"
            "      .then(() => {})\r\n"
            "      .catch(() => {});\r\n"
            "    }\r\n"
            "  </script>\r\n";

        constexpr auto head = [](auto title) -> const std::string {
            std::stringstream ss;
            ss << "<!DOCTYPE html>\r\n"
                  "<html lang=\"en\">\r\n"
               << "  <head>\r\n"
                  "    <meta charset=\"UTF-8\">\r\n"
                  "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n"
                  "    <title id=\"snip_content_cell\">" << title << "</title>\r\n"
                  "  </head>\r\n"
               << default_css
               << js;

            return ss.str();
        };

        const std::string left_sidebar = 
            "<nav class=\"sidebar\">\r\n"
            "  <header>\r\n"
            "    <div class=\"control_panel\">\r\n"
            "      <div class=\"logo_text\">\r\n"
            "        <span class=\"panel_title\" id=\"snip_content_cell\">VPR-NET</span>\r\n"
            "      </div>\r\n"
            "      <div class=\"logo_description\">\r\n"
            "        <span class=\"panel_description\" id=\"snip_content_cell\">Control Panel</span>\r\n"
            "      </div>\r\n"
            "    </div>\r\n"
            "    <i class=\"bx bx-cheveron-right toggle\"></i>\r\n"
            "  </header>\r\n"
            "  <div class=\"sidebar_content\">\r\n"
            "  </div>\r\n"
            "  <footer>\r\n"
            "    <div class=\"footer_buttons\">\r\n"
            "      <a href='/term'><button id=\"terminate_button\">terminate session</button></a>\r\n"
            "    </div>\r\n"
            "  </footer>\r\n"
            "</nav>\r\n";
    } // namespace element
} // namespace vprnet


///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////

class vprnet::resources::StatusLine {
public:
    StatusLine() = delete;
    StatusLine operator = (const StatusLine& other) = delete;
    StatusLine(std::string protocol, std::uint16_t status)
      : protocol_( protocol ),
        status_( status )
    {
    }

    std::string data() const noexcept {
        std::stringstream result;
        result << protocol_ << " " << status_;

        switch (status_)
        {
            case http_status::ok: {
                result << " OK";
                break;
            }
            case http_status::im_used: {
                result << " Error: I'm used";
                break;
            }
            case http_status::bad_request: {
                result << " Error: Bad request";
                break;
            }
            case http_status::not_found: {
                result << " Error: Not found";
                break;
            }
            case http_status::service_unavailable: {
                result << " Error: Service unavailable";
                break;
            }
            default: {
                break;
            }
        }

        result << "\r\n";
        return result.str();
    }
private:
    std::string     protocol_;
    std::uint16_t     status_;
};

class vprnet::resources::Header {
public:
    Header(std::string field, std::string value)
      : field_(field),
        value_(value)
    {
    }

    std::string data() const {
        std::stringstream result;
        result << field_ << ": " << value_ << "\r\n";

        return result.str();
    }
private:
    const std::string field_;
    const std::string value_;
};

class vprnet::resources::Headers {
public:
    Headers() = delete;
    Headers operator = (const Headers& other) = delete;
    Headers(std::vector<Header> headers)
      : headers_( headers )
    {
        std::stringstream result;
        for (auto header : headers_) {
            result << header.data();
        }
        
        data_ = result.str();
    }

    std::string data() const {
        return data_;
    }
private:
    std::vector<Header> headers_;
    std::string            data_;
};

class vprnet::HttpClient {
public:
    HttpResponse send_request(const HttpRequest& request);
    // Other utility functions.
};

class vprnet::HttpResponse {
public:
    HttpResponse() = delete;
    HttpResponse(const HttpResponse& other) = delete;
    HttpResponse& operator = (const HttpResponse& other) = delete;
    HttpResponse(const HttpResponse&& other) = delete;
    HttpResponse& operator = (const HttpResponse&& other) = delete;

    HttpResponse(const resources::StatusLine&& status_line, resources::Headers&& headers, const std::string& payload)
    : status_line_ ( status_line ),
      headers_     ( headers ),
      size_        ( static_cast<std::int32_t>( payload.size() ) )
    {
        std::stringstream result;
        result << status_line_.data()
               << headers_.data()
               << resources::Header( "Content-Length", std::to_string(size_) ).data()
               << "\r\n"
               << payload.data();

        data_ = result.str();
    }

    HttpResponse(const resources::StatusLine&& status_line, resources::Headers&& headers, const std::vector<std::uint8_t>& payload)
    : status_line_ ( status_line ),
      headers_     ( headers ),
      size_        ( static_cast<std::int32_t>( payload.size() ) )
    {
        std::stringstream result;
        result << status_line_.data()
               << headers_.data()
               << resources::Header( "Content-Length", std::to_string(size_) ).data()
               << "\r\n";
        std::copy(payload.begin(), payload.end(), std::ostreambuf_iterator<char>(result));

        data_ = result.str();
    }

    const std::string data() const noexcept {
        return data_;
    }

    const char* raw_data() const noexcept {
        return data_.c_str();
    }

    std::int32_t size() const noexcept {
        return static_cast<std::int32_t>(data_.size());
    }
private:
    using payload_t = std::variant<std::string, std::vector<std::uint8_t>>;
    resources::StatusLine status_line_;
    resources::Headers        headers_;
    std::int32_t                 size_;
    std::string                  data_;
};

// Optionally, HTTP Server components
class vprnet::HttpServer {
    typedef int socklen_t;
public:
    static inline HttpServer& instance(std::string title) noexcept {
        std::lock_guard<std::mutex> lock( mutex_ );
        if (!instance_) {
            instance_ = http_server_ptr( new HttpServer(title) );
        }

        return *instance_;
    }
    ~HttpServer() {
        if (server_socket_ > 0) {
            closesocket(server_socket_);
        }

        if (client_socket_ > 0) {
            closesocket(client_socket_);
        }

        WSACleanup();
    }
    
    inline int serve() noexcept {
        while ((client_socket_ = accept(server_socket_, (sockaddr *)&client_addr_, &client_addr_length_)) != INVALID_SOCKET) {
            if (client_socket_ == INVALID_SOCKET) {
                continue;
            }

            char buffer[1024] = { 0 };
            recv(client_socket_, buffer, sizeof(buffer)-1, 0);
            const std::string recv_str(buffer);

            std::regex endpoint_pattern("GET /[a-zA-Z0-9\\.]*");
            std::sregex_iterator endpoint_match(recv_str.begin(), recv_str.end(), endpoint_pattern);
            std::sregex_iterator endpoint_end;

            if (endpoint_match == endpoint_end) {
                send_plain_response(http_status::not_found, std::string("Page not found."));
                closesocket(client_socket_);

                continue;
            }

            std::string endpoint = std::smatch(*endpoint_match).str().substr(4);
            if (!session_manager_.has_active_session() ) {
                if (endpoint != "/term" && endpoint != "/favicon.ico") {
                    session_manager_.create_session();
                    send_html_response_and_set_cookie(http_status::ok, generate_payload());
                } else {
                    send_plain_response(http_status::bad_request, std::string("Session already terminated."));
                }

                closesocket(client_socket_);
                continue;
            }

            if (!validate_session(recv_str)) {
                send_html_response(http_status::im_used, std::string("Currently in use. Disconnect from other session to proceed."));
                closesocket(client_socket_);

                continue;
            }

            if (endpoint == "/" || endpoint == "/home" || endpoint == "/index.html") {
                send_html_response_and_set_cookie(http_status::ok, generate_payload());
                closesocket(client_socket_);

                continue;
            }

            if (endpoint == "/term") {
                session_manager_.end_session();
                send_plain_response(http_status::ok, std::string("Session successfully terminated."));
                closesocket(client_socket_);
                
                continue;
            }

            if (endpoint == "/favicon.ico") {
                send_icon_response(http_status::ok, bin::viper_ico);
                closesocket(client_socket_);

                continue;
            }

            if (endpoints_.find(endpoint) == endpoints_.end()) {
                send_plain_response(http_status::not_found, std::string("Page not found."));
                closesocket(client_socket_);

                continue;
            }

            const auto type = endpoints_[endpoint].second;
            status_t status = execute_endpoint_callback(type, endpoint, recv_str);

            send_html_response(status, generate_payload());
            closesocket(client_socket_);
        }

        return 1;
    }

    template <typename T>
    bool set_endpoint(const std::string& endpoint, T&& variant, const types type = toggle) {
        if (endpoints_.find(endpoint) != endpoints_.end()) {
            return false;
        }
        endpoints_[endpoint] = { variant, type };

        return true;
    }

protected:
    HttpServer(std::string title, std::uint16_t port = 47001)
      : title_              ( title ),
        port_               ( port ),
        last_status_        ( 0 ),
        wsaData_            ( { } ),
        server_addr_        ( { } ),
        server_socket_      ( INVALID_SOCKET ),
        client_addr_        ( { } ),
        client_socket_      ( INVALID_SOCKET ),
        client_addr_length_ ( sizeof(client_addr_) ),
        session_manager_    ( *this )
    {
        const auto wVersionRequested = MAKEWORD(2, 2);
        if ( (last_status_ = WSAStartup( wVersionRequested, &wsaData_ )) != EXIT_SUCCESS) {
            last_status_ = -1;
            return;
        }

        server_addr_.sin_family      = AF_INET;
        server_addr_.sin_port        = htons( port_ );
        server_addr_.sin_addr.s_addr = INADDR_ANY;

        if ((server_socket_ = socket(AF_INET, SOCK_STREAM, 0)) <= 0) {
            last_status_ = -1;
            return;
        }

        if ((last_status_ = bind(server_socket_, (sockaddr *)(&server_addr_), sizeof(server_addr_))) == SOCKET_ERROR) {
            return;
        }

        if ((last_status_ = listen(server_socket_, 5)) == SOCKET_ERROR) {
            return;
        }
    }

    std::string generate_payload() const noexcept {
        std::stringstream ss;

        ss << element::head( title_ )
           << element::left_sidebar
           << "  <body>\r\n"
              "    <div id=\"snip_index_cell\" colspan=\"3\"><h2>" << title_ << "</h2>\r\n"
              "      <br>\r\n"
              "      <br>\r\n"
              "      <br>\r\n"
           << [&] () -> std::string {
                std::string body;
                body.reserve(16384);
                for (const auto& [endpoint, pair] : endpoints_) {
                    const auto type = pair.second;
                    switch (type) {
                        case types::button:
                        {
                            body += "    <button id=\"snip_content_cell\" onclick=\"fetch_endpoint('" + endpoint + "')\">Activate " + endpoint.substr(1) + "</button>\r\n";
                            break;
                        }
                        case types::toggle:
                        {
                            body += "    <button id=\"snip_content_cell\" onclick=\"fetch_endpoint('" + endpoint + "')\">Toggle " + endpoint.substr(1) + "</button>\r\n";
                            break;
                        }
                        case types::i32_field:
                        case types::i64_field:
                        case types::u32_field:
                        case types::u64_field:
                        {
                            body += "    <form id=\"snip_content_cell\">\r\n"
                                    "      <input colspan=\"3\" id=\"" + endpoint.substr(1) + "\" type=\"number\" name=\"value\" min=\"0\" max=\"" + std::to_string(INT64_MAX) + "\" placeholder=\"Set " + endpoint.substr(1) + " value...\">\r\n"
                                    "    </form>";
                            break;
                        }
                        case types::f32_field:
                        case types::f64_field: {
                            break;
                        }
                        case types::str_field: {
                            break;
                        }
                        default:
                        {
                            break;
                        }
                    }

                    body += "    <br>\r\n";

                }

                return body;
           }()
           << "    </div>"
              "  </body>\r\n"
           << "</html>\r\n";

        return ss.str();
    }

    inline HttpServer operator = (const HttpServer& other) = delete;
private:
    inline void send_plain_response(status_t status, const std::string&& payload) const noexcept {
        HttpResponse response(
            resources::StatusLine( "HTTP/1.1", status ),
            resources::Headers({
                resources::Header( "Content-Type", "text/plain" ),
            }),
            payload
        );
        send(client_socket_, response.raw_data(), response.size(), 0);
    }

    inline void send_html_response(status_t status, const std::string&& payload) const noexcept {
        HttpResponse response(
            resources::StatusLine( "HTTP/1.1", status ),
            resources::Headers({
                resources::Header( "Content-Type", "text/html" ),
            }),
            payload
        );
        send(client_socket_, response.raw_data(), response.size(), 0);
    }

    inline void send_html_response_and_set_cookie(status_t status, const std::string&& payload) const noexcept {
        HttpResponse response(
            resources::StatusLine( "HTTP/1.1", status ),
            resources::Headers({
                resources::Header( "Content-Type", "text/html" ),
                resources::Header( "Set-Cookie", "SessionID=" + session_manager_.active_session_id() + "; SameSite=Lax\r\n")
            }),
            payload
        );
        send(client_socket_, response.raw_data(), response.size(), 0);
    }

    inline void send_icon_response(status_t status, const std::vector<std::uint8_t>& bytes) const noexcept {
        HttpResponse response(
            resources::StatusLine( "HTTP/1.1", status ),
            resources::Headers({
                resources::Header( "Content-Type", "image/x-icon" ),
                resources::Header( "Accept-Ranges", "bytes" ),
            }),
            bytes
        );
        send(client_socket_, response.raw_data(), response.size(), 0);
    }

    inline bool validate_session(const std::string& recv_str) const noexcept {
        std::regex query_pattern(R"(Cookie: SessionID=([A-Za-z0-9]{256}))");
        std::sregex_iterator query(recv_str.begin(), recv_str.end(), query_pattern);
        std::smatch query_match;

        if (std::regex_search(recv_str, query_match, query_pattern)) {
            const std::string str_value = query_match[1];
        
            return str_value == session_manager_.active_session_id();
        }

        return false;
    }

    inline status_t execute_endpoint_callback(auto type, auto endpoint, const std::string& recv_str) noexcept {
        switch (type) {
            case types::button:
            case types::toggle:
            {
                std::get<void_callback>(endpoints_[endpoint].first)();
                return http_status::ok;
            }
            case types::i32_field:
            {
                std::regex query_pattern(R"(\?value=(-?\d+))");
                std::sregex_iterator query(recv_str.begin(), recv_str.end(), query_pattern);
                std::smatch query_match;

                if (!std::regex_search(recv_str, query_match, query_pattern)) {
                    return http_status::bad_request;
                }
                const std::string str_value = query_match[1];

                std::int32_t i32_value;
                auto [ptr, ec] = std::from_chars(str_value.data(), str_value.data()+str_value.size(), i32_value, 10);
                if (ec == std::errc::result_out_of_range) {
                    return http_status::bad_request;
                }

                std::get<i32_callback>(endpoints_[endpoint].first)(i32_value);
                return http_status::ok;
            }
            case types::u32_field:
            {
                std::regex query_pattern(R"(\?value=(\d+))");
                std::sregex_iterator query(recv_str.begin(), recv_str.end(), query_pattern);
                std::smatch query_match;

                if (!std::regex_search(recv_str, query_match, query_pattern)) {
                    return http_status::bad_request;
                }
                const std::string str_value = query_match[1];

                std::uint32_t u32_value;
                auto [ptr, ec] = std::from_chars(str_value.data(), str_value.data()+str_value.size(), u32_value, 10);
                if (ec == std::errc::result_out_of_range) {
                    return http_status::bad_request;
                }

                std::get<i64_callback>(endpoints_[endpoint].first)(u32_value);
                return http_status::ok;
            }
            case types::i64_field:
            {
                std::regex query_pattern(R"(\?value=(-?\d+))");
                std::sregex_iterator query(recv_str.begin(), recv_str.end(), query_pattern);
                std::smatch query_match;

                if (!std::regex_search(recv_str, query_match, query_pattern)) {
                    return http_status::bad_request;
                }
                const std::string str_value = query_match[1];

                std::int64_t i64_value;
                auto [ptr, ec] = std::from_chars(str_value.data(), str_value.data()+str_value.size(), i64_value, 10);
                if (ec == std::errc::result_out_of_range) {
                    return http_status::bad_request;
                }

                std::get<i64_callback>(endpoints_[endpoint].first)(i64_value);
                return http_status::ok;
            }
            case types::u64_field:
            {
                std::regex query_pattern(R"(\?value=(\d+))");
                std::sregex_iterator query(recv_str.begin(), recv_str.end(), query_pattern);
                std::smatch query_match;

                if (!std::regex_search(recv_str, query_match, query_pattern)) {
                    return http_status::bad_request;
                }
                const std::string str_value = query_match[1];

                std::uint64_t u64_value;
                auto [ptr, ec] = std::from_chars(str_value.data(), str_value.data()+str_value.size(), u64_value, 10);
                if (ec == std::errc::result_out_of_range) {
                    return http_status::bad_request;
                }

                std::get<u64_callback>(endpoints_[endpoint].first)(u64_value);
                return http_status::ok;
            }
            case types::f32_field:
            {
                std::regex query_pattern(R"(\?value=([-+]?\d*\.?\d+([eE][-+]?\d+)?))");
                std::sregex_iterator query(recv_str.begin(), recv_str.end(), query_pattern);
                std::smatch query_match;

                if (!std::regex_search(recv_str, query_match, query_pattern)) {
                    return http_status::bad_request;
                }
                const std::string str_value = query_match[1];

                std::float_t f32_value;
                auto [ptr, ec] = std::from_chars(str_value.data(), str_value.data()+str_value.size(), f32_value);
                if (ec == std::errc::result_out_of_range) {
                    return http_status::bad_request;
                }

                std::get<f32_callback>(endpoints_[endpoint].first)(f32_value);
                return http_status::ok;
            }
            case types::f64_field:
            {
                std::regex query_pattern(R"(\?value=([-+]?\d*\.?\d+([eE][-+]?\d+)?))");
                std::sregex_iterator query(recv_str.begin(), recv_str.end(), query_pattern);
                std::smatch query_match;

                if (!std::regex_search(recv_str, query_match, query_pattern)) {
                    return http_status::bad_request;
                }
                const std::string str_value = query_match[1];

                std::double_t f64_value;
                auto [ptr, ec] = std::from_chars(str_value.data(), str_value.data()+str_value.size(), f64_value);
                if (ec == std::errc::result_out_of_range) {
                    return http_status::bad_request;
                }

                std::get<f64_callback>(endpoints_[endpoint].first)(f64_value);
                return http_status::ok;
            }
            default:
            {
                break;
            }
        }

        return http_status::internal_server_error;
    }

    class SessionManager {
    private:
        const HttpServer&                http_server_;
        std::optional<std::string> active_session_id_;
        bool                           session_ready_;

    public:
        SessionManager(const HttpServer& http_server)
          : http_server_(http_server)
        {}

        SessionManager() = delete;
        SessionManager& operator = (const SessionManager& other) = delete;

        inline void generate_session_id() noexcept {
            constexpr char chars[] = {
                '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
                'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
            };

            std::random_device rd;
            std::mt19937 generator(rd());
            std::uniform_int_distribution<size_t> distribution(0, sizeof(chars)-1);

            std::string random_string(256, 0);
            for (auto& c : random_string) {
                c = chars[distribution(generator)];
            }

            active_session_id_ = random_string;
        }

        inline void create_session() noexcept {
            std::lock_guard<std::mutex> lock(http_server_.mutex_);

            if (!active_session_id_.has_value() ) {
                generate_session_id();
            }
        }

        inline void end_session() noexcept {
            std::lock_guard<std::mutex> lock(http_server_.mutex_);
            if (active_session_id_.has_value() ) {
                active_session_id_.reset();
            }
        }

        [[nodiscard]]
        inline bool has_active_session() const noexcept {
            std::lock_guard<std::mutex> lock(http_server_.mutex_);
            return active_session_id_.has_value();
        }

        const std::string& active_session_id() const noexcept { return active_session_id_.value(); }
    }; // SessionManager

    static inline std::mutex                   mutex_;
    static inline http_server_ptr           instance_;
    const std::string                          title_;
    const std::uint16_t                         port_;
    mutable std::int32_t                 last_status_;
    WSADATA                                  wsaData_;
    SOCKADDR_IN                          server_addr_;
    mutable SOCKET                     server_socket_;
    SOCKADDR_IN                          client_addr_;
    mutable SOCKET                     client_socket_;
    socklen_t                     client_addr_length_;
    endpoint_t                             endpoints_;
    SessionManager                   session_manager_;

}; // HttpServer

class vprnet::HttpRequest {
public:
    // Methods to set request type, headers, body, etc.
};

#endif // VPRNET_HEADER